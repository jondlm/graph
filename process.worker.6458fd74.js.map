{"mappings":"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","sources":["<anon>","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/dist/simulator/types/web-worker-simulator/process.worker.js","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/src/simulator/types/web-worker-simulator/process.worker.ts","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/dist/simulator/engine/d3-simulator-engine.js","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/src/simulator/engine/d3-simulator-engine.ts","node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/center.js","node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/collide.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/quadtree.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/add.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/cover.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/data.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/extent.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/find.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/quad.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/remove.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/root.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/size.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/visit.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/visitAfter.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/x.js","node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/y.js","node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/constant.js","node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/jiggle.js","node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/link.js","node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/manyBody.js","node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/simulation.js","node_modules/.pnpm/d3-dispatch@3.0.1/node_modules/d3-dispatch/src/dispatch.js","node_modules/.pnpm/d3-timer@3.0.1/node_modules/d3-timer/src/timer.js","node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/lcg.js","node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/x.js","node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/y.js","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/dist/utils/emitter.utils.js","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/src/utils/emitter.utils.ts","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/dist/utils/object.utils.js","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/src/utils/object.utils.ts","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/dist/utils/type.utils.js","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/src/utils/type.utils.ts","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/dist/simulator/types/web-worker-simulator/message/worker-input.js","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/src/simulator/types/web-worker-simulator/message/worker-input.ts","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/dist/simulator/types/web-worker-simulator/message/worker-output.js","node_modules/.pnpm/@memgraph+orb@0.4.0/node_modules/@memgraph/orb/src/simulator/types/web-worker-simulator/message/worker-output.ts"],"sourcesContent":["(() => {\nvar $9acc002fb81d8d7e$exports = {};\n// / <reference lib=\"webworker\" />\nfunction $970b3c3e19cf97c8$export$2e2bcd8739ae039(x, y) {\n    var nodes, strength = 1;\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n    function force() {\n        var i, n = nodes.length, node, sx = 0, sy = 0;\n        for(i = 0; i < n; ++i)node = nodes[i], sx += node.x, sy += node.y;\n        for(sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i)node = nodes[i], node.x -= sx, node.y -= sy;\n    }\n    force.initialize = function(_) {\n        nodes = _;\n    };\n    force.x = function(_) {\n        return arguments.length ? (x = +_, force) : x;\n    };\n    force.y = function(_) {\n        return arguments.length ? (y = +_, force) : y;\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = +_, force) : strength;\n    };\n    return force;\n}\n\nfunction $52eff533f06343d3$export$2e2bcd8739ae039(d) {\n    const x = +this._x.call(null, d), y = +this._y.call(null, d);\n    return $52eff533f06343d3$var$add(this.cover(x, y), x, y, d);\n}\nfunction $52eff533f06343d3$var$add(tree, x, y, d) {\n    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n    var parent, node = tree._root, leaf = {\n        data: d\n    }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return tree._root = leaf, tree;\n    // Find the existing leaf for the new point, or add it.\n    while(node.length){\n        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;\n        else x1 = xm;\n        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;\n        else y1 = ym;\n        if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n    }\n    // Is the new point is exactly coincident with the existing point?\n    xp = +tree._x.call(null, node.data);\n    yp = +tree._y.call(null, node.data);\n    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n    // Otherwise, split the leaf node until the old and new point are separated.\n    do {\n        parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;\n        else x1 = xm;\n        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;\n        else y1 = ym;\n    }while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));\n    return parent[j] = node, parent[i] = leaf, tree;\n}\nfunction $52eff533f06343d3$export$32ed0561867ec8a1(data) {\n    var d, i, n = data.length, x, y, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;\n    // Compute the points and their extent.\n    for(i = 0; i < n; ++i){\n        if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n        xz[i] = x;\n        yz[i] = y;\n        if (x < x0) x0 = x;\n        if (x > x1) x1 = x;\n        if (y < y0) y0 = y;\n        if (y > y1) y1 = y;\n    }\n    // If there were no (valid) points, abort.\n    if (x0 > x1 || y0 > y1) return this;\n    // Expand the tree to cover the new points.\n    this.cover(x0, y0).cover(x1, y1);\n    // Add the new points.\n    for(i = 0; i < n; ++i)$52eff533f06343d3$var$add(this, xz[i], yz[i], data[i]);\n    return this;\n}\n\n\nfunction $7d09a9f85075a726$export$2e2bcd8739ae039(x, y) {\n    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n    var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;\n    // If the quadtree has no extent, initialize them.\n    // Integer extent are necessary so that if we later double the extent,\n    // the existing quadrant boundaries don’t change due to floating point error!\n    if (isNaN(x0)) {\n        x1 = (x0 = Math.floor(x)) + 1;\n        y1 = (y0 = Math.floor(y)) + 1;\n    } else {\n        var z = x1 - x0 || 1, node = this._root, parent, i;\n        while(x0 > x || x >= x1 || y0 > y || y >= y1){\n            i = (y < y0) << 1 | x < x0;\n            parent = new Array(4), parent[i] = node, node = parent, z *= 2;\n            switch(i){\n                case 0:\n                    x1 = x0 + z, y1 = y0 + z;\n                    break;\n                case 1:\n                    x0 = x1 - z, y1 = y0 + z;\n                    break;\n                case 2:\n                    x1 = x0 + z, y0 = y1 - z;\n                    break;\n                case 3:\n                    x0 = x1 - z, y0 = y1 - z;\n                    break;\n            }\n        }\n        if (this._root && this._root.length) this._root = node;\n    }\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    return this;\n}\n\n\nfunction $43ee770c8d73fbe2$export$2e2bcd8739ae039() {\n    var data = [];\n    this.visit(function(node) {\n        if (!node.length) do data.push(node.data);\n        while (node = node.next);\n    });\n    return data;\n}\n\n\nfunction $8a135c76dd0c24ce$export$2e2bcd8739ae039(_) {\n    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [\n        [\n            this._x0,\n            this._y0\n        ],\n        [\n            this._x1,\n            this._y1\n        ]\n    ];\n}\n\n\nfunction $193001351f8ef695$export$2e2bcd8739ae039(node, x0, y0, x1, y1) {\n    this.node = node;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n}\n\n\nfunction $4b2ffcc8b75d06cd$export$2e2bcd8739ae039(x, y, radius) {\n    var data, x0 = this._x0, y0 = this._y0, x1, y1, x2, y2, x3 = this._x1, y3 = this._y1, quads = [], node = this._root, q, i;\n    if (node) quads.push(new (0, $193001351f8ef695$export$2e2bcd8739ae039)(node, x0, y0, x3, y3));\n    if (radius == null) radius = Infinity;\n    else {\n        x0 = x - radius, y0 = y - radius;\n        x3 = x + radius, y3 = y + radius;\n        radius *= radius;\n    }\n    while(q = quads.pop()){\n        // Stop searching if this quadrant can’t contain a closer node.\n        if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue;\n        // Bisect the current quadrant.\n        if (node.length) {\n            var xm = (x1 + x2) / 2, ym = (y1 + y2) / 2;\n            quads.push(new (0, $193001351f8ef695$export$2e2bcd8739ae039)(node[3], xm, ym, x2, y2), new (0, $193001351f8ef695$export$2e2bcd8739ae039)(node[2], x1, ym, xm, y2), new (0, $193001351f8ef695$export$2e2bcd8739ae039)(node[1], xm, y1, x2, ym), new (0, $193001351f8ef695$export$2e2bcd8739ae039)(node[0], x1, y1, xm, ym));\n            // Visit the closest quadrant first.\n            if (i = (y >= ym) << 1 | x >= xm) {\n                q = quads[quads.length - 1];\n                quads[quads.length - 1] = quads[quads.length - 1 - i];\n                quads[quads.length - 1 - i] = q;\n            }\n        } else {\n            var dx = x - +this._x.call(null, node.data), dy = y - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;\n            if (d2 < radius) {\n                var d = Math.sqrt(radius = d2);\n                x0 = x - d, y0 = y - d;\n                x3 = x + d, y3 = y + d;\n                data = node.data;\n            }\n        }\n    }\n    return data;\n}\n\n\nfunction $69f4fba03541f502$export$2e2bcd8739ae039(d) {\n    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n    var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x, y, xm, ym, right, bottom, i, j;\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return this;\n    // Find the leaf node for the point.\n    // While descending, also retain the deepest parent with a non-removed sibling.\n    if (node.length) while(true){\n        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;\n        else x1 = xm;\n        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;\n        else y1 = ym;\n        if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n        if (!node.length) break;\n        if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;\n    }\n    // Find the point to remove.\n    while(node.data !== d)if (!(previous = node, node = node.next)) return this;\n    if (next = node.next) delete node.next;\n    // If there are multiple coincident points, remove just the point.\n    if (previous) return next ? previous.next = next : delete previous.next, this;\n    // If this is the root point, remove it.\n    if (!parent) return this._root = next, this;\n    // Remove this leaf.\n    next ? parent[i] = next : delete parent[i];\n    // If the parent now contains exactly one leaf, collapse superfluous parents.\n    if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {\n        if (retainer) retainer[j] = node;\n        else this._root = node;\n    }\n    return this;\n}\nfunction $69f4fba03541f502$export$1cfc7aad5cb1833b(data) {\n    for(var i = 0, n = data.length; i < n; ++i)this.remove(data[i]);\n    return this;\n}\n\n\nfunction $9aba935752110b9d$export$2e2bcd8739ae039() {\n    return this._root;\n}\n\n\nfunction $0389cc3263391c89$export$2e2bcd8739ae039() {\n    var size = 0;\n    this.visit(function(node) {\n        if (!node.length) do ++size;\n        while (node = node.next);\n    });\n    return size;\n}\n\n\n\nfunction $c2d3e137991732d4$export$2e2bcd8739ae039(callback) {\n    var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n    if (node) quads.push(new (0, $193001351f8ef695$export$2e2bcd8739ae039)(node, this._x0, this._y0, this._x1, this._y1));\n    while(q = quads.pop())if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[3]) quads.push(new (0, $193001351f8ef695$export$2e2bcd8739ae039)(child, xm, ym, x1, y1));\n        if (child = node[2]) quads.push(new (0, $193001351f8ef695$export$2e2bcd8739ae039)(child, x0, ym, xm, y1));\n        if (child = node[1]) quads.push(new (0, $193001351f8ef695$export$2e2bcd8739ae039)(child, xm, y0, x1, ym));\n        if (child = node[0]) quads.push(new (0, $193001351f8ef695$export$2e2bcd8739ae039)(child, x0, y0, xm, ym));\n    }\n    return this;\n}\n\n\n\nfunction $9cf8b6634322b838$export$2e2bcd8739ae039(callback) {\n    var quads = [], next = [], q;\n    if (this._root) quads.push(new (0, $193001351f8ef695$export$2e2bcd8739ae039)(this._root, this._x0, this._y0, this._x1, this._y1));\n    while(q = quads.pop()){\n        var node = q.node;\n        if (node.length) {\n            var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n            if (child = node[0]) quads.push(new (0, $193001351f8ef695$export$2e2bcd8739ae039)(child, x0, y0, xm, ym));\n            if (child = node[1]) quads.push(new (0, $193001351f8ef695$export$2e2bcd8739ae039)(child, xm, y0, x1, ym));\n            if (child = node[2]) quads.push(new (0, $193001351f8ef695$export$2e2bcd8739ae039)(child, x0, ym, xm, y1));\n            if (child = node[3]) quads.push(new (0, $193001351f8ef695$export$2e2bcd8739ae039)(child, xm, ym, x1, y1));\n        }\n        next.push(q);\n    }\n    while(q = next.pop())callback(q.node, q.x0, q.y0, q.x1, q.y1);\n    return this;\n}\n\n\nfunction $2f57a63172d5c41d$export$e6fafc98131d2a44(d) {\n    return d[0];\n}\nfunction $2f57a63172d5c41d$export$2e2bcd8739ae039(_) {\n    return arguments.length ? (this._x = _, this) : this._x;\n}\n\n\nfunction $2dfd96a9d213be3f$export$6f0a21aeb844a64c(d) {\n    return d[1];\n}\nfunction $2dfd96a9d213be3f$export$2e2bcd8739ae039(_) {\n    return arguments.length ? (this._y = _, this) : this._y;\n}\n\n\nfunction $e6b0b758fd7af9aa$export$2e2bcd8739ae039(nodes, x, y) {\n    var tree = new $e6b0b758fd7af9aa$var$Quadtree(x == null ? (0, $2f57a63172d5c41d$export$e6fafc98131d2a44) : x, y == null ? (0, $2dfd96a9d213be3f$export$6f0a21aeb844a64c) : y, NaN, NaN, NaN, NaN);\n    return nodes == null ? tree : tree.addAll(nodes);\n}\nfunction $e6b0b758fd7af9aa$var$Quadtree(x, y, x0, y0, x1, y1) {\n    this._x = x;\n    this._y = y;\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._root = undefined;\n}\nfunction $e6b0b758fd7af9aa$var$leaf_copy(leaf) {\n    var copy = {\n        data: leaf.data\n    }, next = copy;\n    while(leaf = leaf.next)next = next.next = {\n        data: leaf.data\n    };\n    return copy;\n}\nvar $e6b0b758fd7af9aa$var$treeProto = $e6b0b758fd7af9aa$export$2e2bcd8739ae039.prototype = $e6b0b758fd7af9aa$var$Quadtree.prototype;\n$e6b0b758fd7af9aa$var$treeProto.copy = function() {\n    var copy = new $e6b0b758fd7af9aa$var$Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;\n    if (!node) return copy;\n    if (!node.length) return copy._root = $e6b0b758fd7af9aa$var$leaf_copy(node), copy;\n    nodes = [\n        {\n            source: node,\n            target: copy._root = new Array(4)\n        }\n    ];\n    while(node = nodes.pop()){\n        for(var i = 0; i < 4; ++i)if (child = node.source[i]) {\n            if (child.length) nodes.push({\n                source: child,\n                target: node.target[i] = new Array(4)\n            });\n            else node.target[i] = $e6b0b758fd7af9aa$var$leaf_copy(child);\n        }\n    }\n    return copy;\n};\n$e6b0b758fd7af9aa$var$treeProto.add = (0, $52eff533f06343d3$export$2e2bcd8739ae039);\n$e6b0b758fd7af9aa$var$treeProto.addAll = (0, $52eff533f06343d3$export$32ed0561867ec8a1);\n$e6b0b758fd7af9aa$var$treeProto.cover = (0, $7d09a9f85075a726$export$2e2bcd8739ae039);\n$e6b0b758fd7af9aa$var$treeProto.data = (0, $43ee770c8d73fbe2$export$2e2bcd8739ae039);\n$e6b0b758fd7af9aa$var$treeProto.extent = (0, $8a135c76dd0c24ce$export$2e2bcd8739ae039);\n$e6b0b758fd7af9aa$var$treeProto.find = (0, $4b2ffcc8b75d06cd$export$2e2bcd8739ae039);\n$e6b0b758fd7af9aa$var$treeProto.remove = (0, $69f4fba03541f502$export$2e2bcd8739ae039);\n$e6b0b758fd7af9aa$var$treeProto.removeAll = (0, $69f4fba03541f502$export$1cfc7aad5cb1833b);\n$e6b0b758fd7af9aa$var$treeProto.root = (0, $9aba935752110b9d$export$2e2bcd8739ae039);\n$e6b0b758fd7af9aa$var$treeProto.size = (0, $0389cc3263391c89$export$2e2bcd8739ae039);\n$e6b0b758fd7af9aa$var$treeProto.visit = (0, $c2d3e137991732d4$export$2e2bcd8739ae039);\n$e6b0b758fd7af9aa$var$treeProto.visitAfter = (0, $9cf8b6634322b838$export$2e2bcd8739ae039);\n$e6b0b758fd7af9aa$var$treeProto.x = (0, $2f57a63172d5c41d$export$2e2bcd8739ae039);\n$e6b0b758fd7af9aa$var$treeProto.y = (0, $2dfd96a9d213be3f$export$2e2bcd8739ae039);\n\n\nfunction $8f091c857f355135$export$2e2bcd8739ae039(x) {\n    return function() {\n        return x;\n    };\n}\n\n\nfunction $51816d6653360e3b$export$2e2bcd8739ae039(random) {\n    return (random() - 0.5) * 1e-6;\n}\n\n\nfunction $475094b0adc72c69$var$x(d) {\n    return d.x + d.vx;\n}\nfunction $475094b0adc72c69$var$y(d) {\n    return d.y + d.vy;\n}\nfunction $475094b0adc72c69$export$2e2bcd8739ae039(radius) {\n    var nodes, radii, random, strength = 1, iterations = 1;\n    if (typeof radius !== \"function\") radius = (0, $8f091c857f355135$export$2e2bcd8739ae039)(radius == null ? 1 : +radius);\n    function force() {\n        var i, n = nodes.length, tree, node, xi, yi, ri, ri2;\n        for(var k = 0; k < iterations; ++k){\n            tree = (0, $e6b0b758fd7af9aa$export$2e2bcd8739ae039)(nodes, $475094b0adc72c69$var$x, $475094b0adc72c69$var$y).visitAfter(prepare);\n            for(i = 0; i < n; ++i){\n                node = nodes[i];\n                ri = radii[node.index], ri2 = ri * ri;\n                xi = node.x + node.vx;\n                yi = node.y + node.vy;\n                tree.visit(apply);\n            }\n        }\n        function apply(quad, x0, y0, x1, y1) {\n            var data = quad.data, rj = quad.r, r = ri + rj;\n            if (data) {\n                if (data.index > node.index) {\n                    var x = xi - data.x - data.vx, y = yi - data.y - data.vy, l = x * x + y * y;\n                    if (l < r * r) {\n                        if (x === 0) x = (0, $51816d6653360e3b$export$2e2bcd8739ae039)(random), l += x * x;\n                        if (y === 0) y = (0, $51816d6653360e3b$export$2e2bcd8739ae039)(random), l += y * y;\n                        l = (r - (l = Math.sqrt(l))) / l * strength;\n                        node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n                        node.vy += (y *= l) * r;\n                        data.vx -= x * (r = 1 - r);\n                        data.vy -= y * r;\n                    }\n                }\n                return;\n            }\n            return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n        }\n    }\n    function prepare(quad) {\n        if (quad.data) return quad.r = radii[quad.data.index];\n        for(var i = quad.r = 0; i < 4; ++i)if (quad[i] && quad[i].r > quad.r) quad.r = quad[i].r;\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length, node;\n        radii = new Array(n);\n        for(i = 0; i < n; ++i)node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n    }\n    force.initialize = function(_nodes, _random) {\n        nodes = _nodes;\n        random = _random;\n        initialize();\n    };\n    force.iterations = function(_) {\n        return arguments.length ? (iterations = +_, force) : iterations;\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = +_, force) : strength;\n    };\n    force.radius = function(_) {\n        return arguments.length ? (radius = typeof _ === \"function\" ? _ : (0, $8f091c857f355135$export$2e2bcd8739ae039)(+_), initialize(), force) : radius;\n    };\n    return force;\n}\n\n\n\nfunction $1b1812fc60e9d4f2$var$index(d) {\n    return d.index;\n}\nfunction $1b1812fc60e9d4f2$var$find(nodeById, nodeId) {\n    var node = nodeById.get(nodeId);\n    if (!node) throw new Error(\"node not found: \" + nodeId);\n    return node;\n}\nfunction $1b1812fc60e9d4f2$export$2e2bcd8739ae039(links) {\n    var id = $1b1812fc60e9d4f2$var$index, strength = defaultStrength, strengths, distance = (0, $8f091c857f355135$export$2e2bcd8739ae039)(30), distances, nodes, count, bias, random, iterations = 1;\n    if (links == null) links = [];\n    function defaultStrength(link) {\n        return 1 / Math.min(count[link.source.index], count[link.target.index]);\n    }\n    function force(alpha) {\n        for(var k = 0, n = links.length; k < iterations; ++k)for(var i = 0, link, source, target, x, y, l, b; i < n; ++i){\n            link = links[i], source = link.source, target = link.target;\n            x = target.x + target.vx - source.x - source.vx || (0, $51816d6653360e3b$export$2e2bcd8739ae039)(random);\n            y = target.y + target.vy - source.y - source.vy || (0, $51816d6653360e3b$export$2e2bcd8739ae039)(random);\n            l = Math.sqrt(x * x + y * y);\n            l = (l - distances[i]) / l * alpha * strengths[i];\n            x *= l, y *= l;\n            target.vx -= x * (b = bias[i]);\n            target.vy -= y * b;\n            source.vx += x * (b = 1 - b);\n            source.vy += y * b;\n        }\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length, m = links.length, nodeById = new Map(nodes.map((d, i)=>[\n                id(d, i, nodes),\n                d\n            ])), link;\n        for(i = 0, count = new Array(n); i < m; ++i){\n            link = links[i], link.index = i;\n            if (typeof link.source !== \"object\") link.source = $1b1812fc60e9d4f2$var$find(nodeById, link.source);\n            if (typeof link.target !== \"object\") link.target = $1b1812fc60e9d4f2$var$find(nodeById, link.target);\n            count[link.source.index] = (count[link.source.index] || 0) + 1;\n            count[link.target.index] = (count[link.target.index] || 0) + 1;\n        }\n        for(i = 0, bias = new Array(m); i < m; ++i)link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n        strengths = new Array(m), initializeStrength();\n        distances = new Array(m), initializeDistance();\n    }\n    function initializeStrength() {\n        if (!nodes) return;\n        for(var i = 0, n = links.length; i < n; ++i)strengths[i] = +strength(links[i], i, links);\n    }\n    function initializeDistance() {\n        if (!nodes) return;\n        for(var i = 0, n = links.length; i < n; ++i)distances[i] = +distance(links[i], i, links);\n    }\n    force.initialize = function(_nodes, _random) {\n        nodes = _nodes;\n        random = _random;\n        initialize();\n    };\n    force.links = function(_) {\n        return arguments.length ? (links = _, initialize(), force) : links;\n    };\n    force.id = function(_) {\n        return arguments.length ? (id = _, force) : id;\n    };\n    force.iterations = function(_) {\n        return arguments.length ? (iterations = +_, force) : iterations;\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $8f091c857f355135$export$2e2bcd8739ae039)(+_), initializeStrength(), force) : strength;\n    };\n    force.distance = function(_) {\n        return arguments.length ? (distance = typeof _ === \"function\" ? _ : (0, $8f091c857f355135$export$2e2bcd8739ae039)(+_), initializeDistance(), force) : distance;\n    };\n    return force;\n}\n\n\n\n\nvar $6948aa01131ba3a4$var$noop = {\n    value: ()=>{}\n};\nfunction $6948aa01131ba3a4$var$dispatch() {\n    for(var i = 0, n = arguments.length, _ = {}, t; i < n; ++i){\n        if (!(t = arguments[i] + \"\") || t in _ || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n        _[t] = [];\n    }\n    return new $6948aa01131ba3a4$var$Dispatch(_);\n}\nfunction $6948aa01131ba3a4$var$Dispatch(_) {\n    this._ = _;\n}\nfunction $6948aa01131ba3a4$var$parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n        var name = \"\", i = t.indexOf(\".\");\n        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n        if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n        return {\n            type: t,\n            name: name\n        };\n    });\n}\n$6948aa01131ba3a4$var$Dispatch.prototype = $6948aa01131ba3a4$var$dispatch.prototype = {\n    constructor: $6948aa01131ba3a4$var$Dispatch,\n    on: function(typename, callback) {\n        var _ = this._, T = $6948aa01131ba3a4$var$parseTypenames(typename + \"\", _), t, i = -1, n = T.length;\n        // If no callback was specified, return the callback of the given type and name.\n        if (arguments.length < 2) {\n            while(++i < n)if ((t = (typename = T[i]).type) && (t = $6948aa01131ba3a4$var$get(_[t], typename.name))) return t;\n            return;\n        }\n        // If a type was specified, set the callback for the given type and name.\n        // Otherwise, if a null callback was specified, remove callbacks of the given name.\n        if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n        while(++i < n){\n            if (t = (typename = T[i]).type) _[t] = $6948aa01131ba3a4$var$set(_[t], typename.name, callback);\n            else if (callback == null) for(t in _)_[t] = $6948aa01131ba3a4$var$set(_[t], typename.name, null);\n        }\n        return this;\n    },\n    copy: function() {\n        var copy = {}, _ = this._;\n        for(var t in _)copy[t] = _[t].slice();\n        return new $6948aa01131ba3a4$var$Dispatch(copy);\n    },\n    call: function(type, that) {\n        if ((n = arguments.length - 2) > 0) for(var args = new Array(n), i = 0, n, t; i < n; ++i)args[i] = arguments[i + 2];\n        if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n        for(t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);\n    },\n    apply: function(type, that, args) {\n        if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n        for(var t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);\n    }\n};\nfunction $6948aa01131ba3a4$var$get(type, name) {\n    for(var i = 0, n = type.length, c; i < n; ++i){\n        if ((c = type[i]).name === name) return c.value;\n    }\n}\nfunction $6948aa01131ba3a4$var$set(type, name, callback) {\n    for(var i = 0, n = type.length; i < n; ++i)if (type[i].name === name) {\n        type[i] = $6948aa01131ba3a4$var$noop, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n    }\n    if (callback != null) type.push({\n        name: name,\n        value: callback\n    });\n    return type;\n}\nvar $6948aa01131ba3a4$export$2e2bcd8739ae039 = $6948aa01131ba3a4$var$dispatch;\n\n\nvar $63cb61f11e735994$var$frame = 0, $63cb61f11e735994$var$timeout = 0, $63cb61f11e735994$var$interval = 0, $63cb61f11e735994$var$pokeDelay = 1000, $63cb61f11e735994$var$taskHead, $63cb61f11e735994$var$taskTail, $63cb61f11e735994$var$clockLast = 0, $63cb61f11e735994$var$clockNow = 0, $63cb61f11e735994$var$clockSkew = 0, $63cb61f11e735994$var$clock = typeof performance === \"object\" && performance.now ? performance : Date, $63cb61f11e735994$var$setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {\n    setTimeout(f, 17);\n};\nfunction $63cb61f11e735994$export$461939dd4422153() {\n    return $63cb61f11e735994$var$clockNow || ($63cb61f11e735994$var$setFrame($63cb61f11e735994$var$clearNow), $63cb61f11e735994$var$clockNow = $63cb61f11e735994$var$clock.now() + $63cb61f11e735994$var$clockSkew);\n}\nfunction $63cb61f11e735994$var$clearNow() {\n    $63cb61f11e735994$var$clockNow = 0;\n}\nfunction $63cb61f11e735994$export$c57e9b2d8b9e4de() {\n    this._call = this._time = this._next = null;\n}\n$63cb61f11e735994$export$c57e9b2d8b9e4de.prototype = $63cb61f11e735994$export$9dc4ecf953986f04.prototype = {\n    constructor: $63cb61f11e735994$export$c57e9b2d8b9e4de,\n    restart: function(callback, delay, time) {\n        if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n        time = (time == null ? $63cb61f11e735994$export$461939dd4422153() : +time) + (delay == null ? 0 : +delay);\n        if (!this._next && $63cb61f11e735994$var$taskTail !== this) {\n            if ($63cb61f11e735994$var$taskTail) $63cb61f11e735994$var$taskTail._next = this;\n            else $63cb61f11e735994$var$taskHead = this;\n            $63cb61f11e735994$var$taskTail = this;\n        }\n        this._call = callback;\n        this._time = time;\n        $63cb61f11e735994$var$sleep();\n    },\n    stop: function() {\n        if (this._call) {\n            this._call = null;\n            this._time = Infinity;\n            $63cb61f11e735994$var$sleep();\n        }\n    }\n};\nfunction $63cb61f11e735994$export$9dc4ecf953986f04(callback, delay, time) {\n    var t = new $63cb61f11e735994$export$c57e9b2d8b9e4de;\n    t.restart(callback, delay, time);\n    return t;\n}\nfunction $63cb61f11e735994$export$d60154c1d7f3990e() {\n    $63cb61f11e735994$export$461939dd4422153(); // Get the current time, if not already set.\n    ++$63cb61f11e735994$var$frame; // Pretend we’ve set an alarm, if we haven’t already.\n    var t = $63cb61f11e735994$var$taskHead, e;\n    while(t){\n        if ((e = $63cb61f11e735994$var$clockNow - t._time) >= 0) t._call.call(undefined, e);\n        t = t._next;\n    }\n    --$63cb61f11e735994$var$frame;\n}\nfunction $63cb61f11e735994$var$wake() {\n    $63cb61f11e735994$var$clockNow = ($63cb61f11e735994$var$clockLast = $63cb61f11e735994$var$clock.now()) + $63cb61f11e735994$var$clockSkew;\n    $63cb61f11e735994$var$frame = $63cb61f11e735994$var$timeout = 0;\n    try {\n        $63cb61f11e735994$export$d60154c1d7f3990e();\n    } finally{\n        $63cb61f11e735994$var$frame = 0;\n        $63cb61f11e735994$var$nap();\n        $63cb61f11e735994$var$clockNow = 0;\n    }\n}\nfunction $63cb61f11e735994$var$poke() {\n    var now = $63cb61f11e735994$var$clock.now(), delay = now - $63cb61f11e735994$var$clockLast;\n    if (delay > $63cb61f11e735994$var$pokeDelay) $63cb61f11e735994$var$clockSkew -= delay, $63cb61f11e735994$var$clockLast = now;\n}\nfunction $63cb61f11e735994$var$nap() {\n    var t0, t1 = $63cb61f11e735994$var$taskHead, t2, time = Infinity;\n    while(t1)if (t1._call) {\n        if (time > t1._time) time = t1._time;\n        t0 = t1, t1 = t1._next;\n    } else {\n        t2 = t1._next, t1._next = null;\n        t1 = t0 ? t0._next = t2 : $63cb61f11e735994$var$taskHead = t2;\n    }\n    $63cb61f11e735994$var$taskTail = t0;\n    $63cb61f11e735994$var$sleep(time);\n}\nfunction $63cb61f11e735994$var$sleep(time) {\n    if ($63cb61f11e735994$var$frame) return; // Soonest alarm already set, or will be.\n    if ($63cb61f11e735994$var$timeout) $63cb61f11e735994$var$timeout = clearTimeout($63cb61f11e735994$var$timeout);\n    var delay = time - $63cb61f11e735994$var$clockNow; // Strictly less than if we recomputed clockNow.\n    if (delay > 24) {\n        if (time < Infinity) $63cb61f11e735994$var$timeout = setTimeout($63cb61f11e735994$var$wake, time - $63cb61f11e735994$var$clock.now() - $63cb61f11e735994$var$clockSkew);\n        if ($63cb61f11e735994$var$interval) $63cb61f11e735994$var$interval = clearInterval($63cb61f11e735994$var$interval);\n    } else {\n        if (!$63cb61f11e735994$var$interval) $63cb61f11e735994$var$clockLast = $63cb61f11e735994$var$clock.now(), $63cb61f11e735994$var$interval = setInterval($63cb61f11e735994$var$poke, $63cb61f11e735994$var$pokeDelay);\n        $63cb61f11e735994$var$frame = 1, $63cb61f11e735994$var$setFrame($63cb61f11e735994$var$wake);\n    }\n}\n\n\n// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst $f606901d0fb54e83$var$a = 1664525;\nconst $f606901d0fb54e83$var$c = 1013904223;\nconst $f606901d0fb54e83$var$m = 4294967296; // 2^32\nfunction $f606901d0fb54e83$export$2e2bcd8739ae039() {\n    let s = 1;\n    return ()=>(s = ($f606901d0fb54e83$var$a * s + $f606901d0fb54e83$var$c) % $f606901d0fb54e83$var$m) / $f606901d0fb54e83$var$m;\n}\n\n\nfunction $57b6b5bc1eaeff34$export$d141bba7fdc215a3(d) {\n    return d.x;\n}\nfunction $57b6b5bc1eaeff34$export$4a5767248b18ef41(d) {\n    return d.y;\n}\nvar $57b6b5bc1eaeff34$var$initialRadius = 10, $57b6b5bc1eaeff34$var$initialAngle = Math.PI * (3 - Math.sqrt(5));\nfunction $57b6b5bc1eaeff34$export$2e2bcd8739ae039(nodes) {\n    var simulation, alpha = 1, alphaMin = 0.001, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = new Map(), stepper = (0, $63cb61f11e735994$export$9dc4ecf953986f04)(step), event = (0, $6948aa01131ba3a4$export$2e2bcd8739ae039)(\"tick\", \"end\"), random = (0, $f606901d0fb54e83$export$2e2bcd8739ae039)();\n    if (nodes == null) nodes = [];\n    function step() {\n        tick();\n        event.call(\"tick\", simulation);\n        if (alpha < alphaMin) {\n            stepper.stop();\n            event.call(\"end\", simulation);\n        }\n    }\n    function tick(iterations) {\n        var i, n = nodes.length, node;\n        if (iterations === undefined) iterations = 1;\n        for(var k = 0; k < iterations; ++k){\n            alpha += (alphaTarget - alpha) * alphaDecay;\n            forces.forEach(function(force) {\n                force(alpha);\n            });\n            for(i = 0; i < n; ++i){\n                node = nodes[i];\n                if (node.fx == null) node.x += node.vx *= velocityDecay;\n                else node.x = node.fx, node.vx = 0;\n                if (node.fy == null) node.y += node.vy *= velocityDecay;\n                else node.y = node.fy, node.vy = 0;\n            }\n        }\n        return simulation;\n    }\n    function initializeNodes() {\n        for(var i = 0, n = nodes.length, node; i < n; ++i){\n            node = nodes[i], node.index = i;\n            if (node.fx != null) node.x = node.fx;\n            if (node.fy != null) node.y = node.fy;\n            if (isNaN(node.x) || isNaN(node.y)) {\n                var radius = $57b6b5bc1eaeff34$var$initialRadius * Math.sqrt(0.5 + i), angle = i * $57b6b5bc1eaeff34$var$initialAngle;\n                node.x = radius * Math.cos(angle);\n                node.y = radius * Math.sin(angle);\n            }\n            if (isNaN(node.vx) || isNaN(node.vy)) node.vx = node.vy = 0;\n        }\n    }\n    function initializeForce(force) {\n        if (force.initialize) force.initialize(nodes, random);\n        return force;\n    }\n    initializeNodes();\n    return simulation = {\n        tick: tick,\n        restart: function() {\n            return stepper.restart(step), simulation;\n        },\n        stop: function() {\n            return stepper.stop(), simulation;\n        },\n        nodes: function(_) {\n            return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n        },\n        alpha: function(_) {\n            return arguments.length ? (alpha = +_, simulation) : alpha;\n        },\n        alphaMin: function(_) {\n            return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n        },\n        alphaDecay: function(_) {\n            return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n        },\n        alphaTarget: function(_) {\n            return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n        },\n        velocityDecay: function(_) {\n            return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n        },\n        randomSource: function(_) {\n            return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n        },\n        force: function(name, _) {\n            return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);\n        },\n        find: function(x, y, radius) {\n            var i = 0, n = nodes.length, dx, dy, d2, node, closest;\n            if (radius == null) radius = Infinity;\n            else radius *= radius;\n            for(i = 0; i < n; ++i){\n                node = nodes[i];\n                dx = x - node.x;\n                dy = y - node.y;\n                d2 = dx * dx + dy * dy;\n                if (d2 < radius) closest = node, radius = d2;\n            }\n            return closest;\n        },\n        on: function(name, _) {\n            return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n        }\n    };\n}\n\n\nfunction $8e47629a37da1438$export$2e2bcd8739ae039() {\n    var nodes, node, random, alpha, strength = (0, $8f091c857f355135$export$2e2bcd8739ae039)(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;\n    function force(_) {\n        var i, n = nodes.length, tree = (0, $e6b0b758fd7af9aa$export$2e2bcd8739ae039)(nodes, (0, $57b6b5bc1eaeff34$export$d141bba7fdc215a3), (0, $57b6b5bc1eaeff34$export$4a5767248b18ef41)).visitAfter(accumulate);\n        for(alpha = _, i = 0; i < n; ++i)node = nodes[i], tree.visit(apply);\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length, node;\n        strengths = new Array(n);\n        for(i = 0; i < n; ++i)node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n    }\n    function accumulate(quad) {\n        var strength = 0, q, c, weight = 0, x, y, i;\n        // For internal nodes, accumulate forces from child quadrants.\n        if (quad.length) {\n            for(x = y = i = 0; i < 4; ++i)if ((q = quad[i]) && (c = Math.abs(q.value))) strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n            quad.x = x / weight;\n            quad.y = y / weight;\n        } else {\n            q = quad;\n            q.x = q.data.x;\n            q.y = q.data.y;\n            do strength += strengths[q.data.index];\n            while (q = q.next);\n        }\n        quad.value = strength;\n    }\n    function apply(quad, x1, _, x2) {\n        if (!quad.value) return true;\n        var x = quad.x - node.x, y = quad.y - node.y, w = x2 - x1, l = x * x + y * y;\n        // Apply the Barnes-Hut approximation if possible.\n        // Limit forces for very close nodes; randomize direction if coincident.\n        if (w * w / theta2 < l) {\n            if (l < distanceMax2) {\n                if (x === 0) x = (0, $51816d6653360e3b$export$2e2bcd8739ae039)(random), l += x * x;\n                if (y === 0) y = (0, $51816d6653360e3b$export$2e2bcd8739ae039)(random), l += y * y;\n                if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n                node.vx += x * quad.value * alpha / l;\n                node.vy += y * quad.value * alpha / l;\n            }\n            return true;\n        } else if (quad.length || l >= distanceMax2) return;\n        // Limit forces for very close nodes; randomize direction if coincident.\n        if (quad.data !== node || quad.next) {\n            if (x === 0) x = (0, $51816d6653360e3b$export$2e2bcd8739ae039)(random), l += x * x;\n            if (y === 0) y = (0, $51816d6653360e3b$export$2e2bcd8739ae039)(random), l += y * y;\n            if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        }\n        do if (quad.data !== node) {\n            w = strengths[quad.data.index] * alpha / l;\n            node.vx += x * w;\n            node.vy += y * w;\n        }\n        while (quad = quad.next);\n    }\n    force.initialize = function(_nodes, _random) {\n        nodes = _nodes;\n        random = _random;\n        initialize();\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $8f091c857f355135$export$2e2bcd8739ae039)(+_), initialize(), force) : strength;\n    };\n    force.distanceMin = function(_) {\n        return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n    };\n    force.distanceMax = function(_) {\n        return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n    };\n    force.theta = function(_) {\n        return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n    };\n    return force;\n}\n\n\nfunction $85fffa1433524720$export$2e2bcd8739ae039(x) {\n    var strength = (0, $8f091c857f355135$export$2e2bcd8739ae039)(0.1), nodes, strengths, xz;\n    if (typeof x !== \"function\") x = (0, $8f091c857f355135$export$2e2bcd8739ae039)(x == null ? 0 : +x);\n    function force(alpha) {\n        for(var i = 0, n = nodes.length, node; i < n; ++i)node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length;\n        strengths = new Array(n);\n        xz = new Array(n);\n        for(i = 0; i < n; ++i)strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n    force.initialize = function(_) {\n        nodes = _;\n        initialize();\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $8f091c857f355135$export$2e2bcd8739ae039)(+_), initialize(), force) : strength;\n    };\n    force.x = function(_) {\n        return arguments.length ? (x = typeof _ === \"function\" ? _ : (0, $8f091c857f355135$export$2e2bcd8739ae039)(+_), initialize(), force) : x;\n    };\n    return force;\n}\n\n\nfunction $07de9cc8eef6ec5b$export$2e2bcd8739ae039(y) {\n    var strength = (0, $8f091c857f355135$export$2e2bcd8739ae039)(0.1), nodes, strengths, yz;\n    if (typeof y !== \"function\") y = (0, $8f091c857f355135$export$2e2bcd8739ae039)(y == null ? 0 : +y);\n    function force(alpha) {\n        for(var i = 0, n = nodes.length, node; i < n; ++i)node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length;\n        strengths = new Array(n);\n        yz = new Array(n);\n        for(i = 0; i < n; ++i)strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n    force.initialize = function(_) {\n        nodes = _;\n        initialize();\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $8f091c857f355135$export$2e2bcd8739ae039)(+_), initialize(), force) : strength;\n    };\n    force.y = function(_) {\n        return arguments.length ? (y = typeof _ === \"function\" ? _ : (0, $8f091c857f355135$export$2e2bcd8739ae039)(+_), initialize(), force) : y;\n    };\n    return force;\n}\n\n\nclass $8c3669d8e468947b$export$4293555f241ae35a {\n    constructor(){\n        this._listeners = new Map();\n    }\n    /**\n     * Adds a one-time listener function for the event named eventName. The next time eventName is\n     * triggered, this listener is removed and then invoked.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitteronceeventname-listener}\n     * @param {IEventKey} eventName Event name\n     * @param {IEventReceiver} func Event function\n     * @return {IEmitter} Reference to the EventEmitter, so that calls can be chained\n     */ once(eventName, func) {\n        const newListener = {\n            callable: func,\n            isOnce: true\n        };\n        const listeners = this._listeners.get(eventName);\n        if (listeners) listeners.push(newListener);\n        else this._listeners.set(eventName, [\n            newListener\n        ]);\n        return this;\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event named eventName.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of eventName and listener will result in the listener being added,\n     * and called, multiple times.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitteroneventname-listener}\n     * @param {IEventKey} eventName Event name\n     * @param {IEventReceiver} func Event function\n     * @return {IEmitter} Reference to the EventEmitter, so that calls can be chained\n     */ on(eventName, func) {\n        const newListener = {\n            callable: func\n        };\n        const listeners = this._listeners.get(eventName);\n        if (listeners) listeners.push(newListener);\n        else this._listeners.set(eventName, [\n            newListener\n        ]);\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event named eventName.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitterremovelistenereventname-listener}\n     * @param {IEventKey} eventName Event name\n     * @param {IEventReceiver} func Event function\n     * @return {IEmitter} Reference to the EventEmitter, so that calls can be chained\n     */ off(eventName, func) {\n        const listeners = this._listeners.get(eventName);\n        if (listeners) {\n            const filteredListeners = listeners.filter((listener)=>listener.callable !== func);\n            this._listeners.set(eventName, filteredListeners);\n        }\n        return this;\n    }\n    /**\n     * Synchronously calls each of the listeners registered for the event named eventName,\n     * in the order they were registered, passing the supplied arguments to each.\n     * Returns true if the event had listeners, false otherwise.\n     *\n     * @param {IEventKey} eventName Event name\n     * @param {any} params Event parameters\n     *\n     * @return {boolean} True if the event had listeners, false otherwise\n     */ emit(eventName, params) {\n        const listeners = this._listeners.get(eventName);\n        if (!listeners || listeners.length === 0) return false;\n        let hasOnceListener = false;\n        for(let i = 0; i < listeners.length; i++){\n            if (listeners[i].isOnce) hasOnceListener = true;\n            listeners[i].callable(params);\n        }\n        if (hasOnceListener) {\n            const filteredListeners = listeners.filter((listener)=>!listener.isOnce);\n            this._listeners.set(eventName, filteredListeners);\n        }\n        return true;\n    }\n    /**\n     * Returns an array listing the events for which the emitter has registered listeners.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emittereventnames}\n     * @return {IEventKey[]} Event names with registered listeners\n     */ eventNames() {\n        return [\n            ...this._listeners.keys()\n        ];\n    }\n    /**\n     * Returns the number of listeners listening to the event named eventName.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitterlistenercounteventname}\n     * @param {IEventKey} eventName Event name\n     * @return {number} Number of listeners listening to the event name\n     */ listenerCount(eventName) {\n        const listeners = this._listeners.get(eventName);\n        return listeners ? listeners.length : 0;\n    }\n    /**\n     * Returns a copy of the array of listeners for the event named eventName.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitterlistenerseventname}\n     * @param {IEventKey} eventName Event name\n     * @return {IEventReceiver[]} Array of listeners for the event name\n     */ listeners(eventName) {\n        const listeners = this._listeners.get(eventName);\n        if (!listeners) return [];\n        return listeners.map((listener)=>listener.callable);\n    }\n    /**\n     * Alias for emitter.on(eventName, listener).\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitteraddlistenereventname-listener}\n     * @param {IEventKey} eventName Event name\n     * @param {IEventReceiver} func Event function\n     * @return {IEmitter} Reference to the EventEmitter, so that calls can be chained\n     */ addListener(eventName, func) {\n        return this.on(eventName, func);\n    }\n    /**\n     * Alias for emitter.off(eventName, listener).\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitterremovelistenereventname-listener}\n     * @param {IEventKey} eventName Event name\n     * @param {IEventReceiver} func Event function\n     * @return {IEmitter} Reference to the EventEmitter, so that calls can be chained\n     */ removeListener(eventName, func) {\n        return this.off(eventName, func);\n    }\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitterremovealllistenerseventname}\n     * @param {IEventKey} eventName Event name\n     * @return {IEmitter} Reference to the EventEmitter, so that calls can be chained\n     */ removeAllListeners(eventName) {\n        if (eventName) this._listeners.delete(eventName);\n        else this._listeners.clear();\n        return this;\n    }\n}\n\n\n/**\n * Type check for string values.\n *\n * @param {any} value Any value\n * @return {boolean} True if it is a string, false otherwise\n */ const $8476f47520e7cd57$export$844ec244b1367d54 = (value)=>{\n    return typeof value === \"string\";\n};\nconst $8476f47520e7cd57$export$7e4aa119212bc614 = (value)=>{\n    return typeof value === \"number\";\n};\nconst $8476f47520e7cd57$export$f9ce7b637dfbe238 = (value)=>{\n    return typeof value === \"boolean\";\n};\nconst $8476f47520e7cd57$export$871608497c498473 = (value)=>{\n    return value instanceof Date;\n};\nconst $8476f47520e7cd57$export$43bee75e5e14138e = (value)=>{\n    return Array.isArray(value);\n};\nconst $8476f47520e7cd57$export$53b83ca8eaab0383 = (value)=>{\n    return value !== null && typeof value === \"object\" && value.constructor.name === \"Object\";\n};\nconst $8476f47520e7cd57$export$630801d484da15df = (value)=>{\n    return value === null;\n};\nconst $8476f47520e7cd57$export$f6e2535fb5126e54 = (value)=>{\n    return typeof value === \"function\";\n};\n\n\nconst $b3abb3226d80884a$export$84f041eb9803ea1f = (obj)=>{\n    if ((0, $8476f47520e7cd57$export$871608497c498473)(obj)) return $b3abb3226d80884a$var$copyDate(obj);\n    if ((0, $8476f47520e7cd57$export$43bee75e5e14138e)(obj)) return $b3abb3226d80884a$var$copyArray(obj);\n    if ((0, $8476f47520e7cd57$export$53b83ca8eaab0383)(obj)) return $b3abb3226d80884a$var$copyPlainObject(obj);\n    // It is a primitive, function or a custom class\n    return obj;\n};\nconst $b3abb3226d80884a$export$2ec3988ee92e21d0 = (obj1, obj2)=>{\n    const isDate1 = (0, $8476f47520e7cd57$export$871608497c498473)(obj1);\n    const isDate2 = (0, $8476f47520e7cd57$export$871608497c498473)(obj2);\n    if (isDate1 && !isDate2 || !isDate1 && isDate2) return false;\n    if (isDate1 && isDate2) return obj1.getTime() === obj2.getTime();\n    const isArray1 = (0, $8476f47520e7cd57$export$43bee75e5e14138e)(obj1);\n    const isArray2 = (0, $8476f47520e7cd57$export$43bee75e5e14138e)(obj2);\n    if (isArray1 && !isArray2 || !isArray1 && isArray2) return false;\n    if (isArray1 && isArray2) {\n        if (obj1.length !== obj2.length) return false;\n        return obj1.every((value, index)=>{\n            return $b3abb3226d80884a$export$2ec3988ee92e21d0(value, obj2[index]);\n        });\n    }\n    const isObject1 = (0, $8476f47520e7cd57$export$53b83ca8eaab0383)(obj1);\n    const isObject2 = (0, $8476f47520e7cd57$export$53b83ca8eaab0383)(obj2);\n    if (isObject1 && !isObject2 || !isObject1 && isObject2) return false;\n    if (isObject1 && isObject2) {\n        const keys1 = Object.keys(obj1);\n        const keys2 = Object.keys(obj2);\n        if (!$b3abb3226d80884a$export$2ec3988ee92e21d0(keys1, keys2)) return false;\n        return keys1.every((key)=>{\n            return $b3abb3226d80884a$export$2ec3988ee92e21d0(obj1[key], obj2[key]);\n        });\n    }\n    return obj1 === obj2;\n};\n/**\n * Copies date object into a new date object.\n *\n * @param {Date} date Date\n * @return {Date} Date object copy\n */ const $b3abb3226d80884a$var$copyDate = (date)=>{\n    return new Date(date);\n};\n/**\n * Deep copies an array into a new array. Array values will\n * be deep copied too.\n *\n * @param {Array} array Array\n * @return {Array} Deep copied array\n */ const $b3abb3226d80884a$var$copyArray = (array)=>{\n    return array.map((value)=>$b3abb3226d80884a$export$84f041eb9803ea1f(value));\n};\n/**\n * Deep copies a plain object into a new plain object. Object\n * values will be deep copied too.\n *\n * @param {Record} obj Object\n * @return {Record} Deep copied object\n */ const $b3abb3226d80884a$var$copyPlainObject = (obj)=>{\n    const newObject = {};\n    Object.keys(obj).forEach((key)=>{\n        newObject[key] = $b3abb3226d80884a$export$84f041eb9803ea1f(obj[key]);\n    });\n    return newObject;\n};\n\n\nconst $06d3d6cf54a075da$var$MANY_BODY_MAX_DISTANCE_TO_LINK_DISTANCE_RATIO = 100;\nconst $06d3d6cf54a075da$var$DEFAULT_LINK_DISTANCE = 30;\nvar $06d3d6cf54a075da$export$da1c198471fd31fc;\n(function(D3SimulatorEngineEventType) {\n    D3SimulatorEngineEventType[\"TICK\"] = \"tick\";\n    D3SimulatorEngineEventType[\"END\"] = \"end\";\n    D3SimulatorEngineEventType[\"SIMULATION_START\"] = \"simulation-start\";\n    D3SimulatorEngineEventType[\"SIMULATION_PROGRESS\"] = \"simulation-progress\";\n    D3SimulatorEngineEventType[\"SIMULATION_END\"] = \"simulation-end\";\n    D3SimulatorEngineEventType[\"NODE_DRAG\"] = \"node-drag\";\n    D3SimulatorEngineEventType[\"SETTINGS_UPDATE\"] = \"settings-update\";\n})($06d3d6cf54a075da$export$da1c198471fd31fc || ($06d3d6cf54a075da$export$da1c198471fd31fc = {}));\nconst $06d3d6cf54a075da$export$1263b77674171074 = (linkDistance)=>{\n    const distance = linkDistance > 0 ? linkDistance : 1;\n    return distance * $06d3d6cf54a075da$var$MANY_BODY_MAX_DISTANCE_TO_LINK_DISTANCE_RATIO;\n};\nconst $06d3d6cf54a075da$export$de29564508b632b2 = {\n    isPhysicsEnabled: false,\n    alpha: {\n        alpha: 1,\n        alphaMin: 0.001,\n        alphaDecay: 0.0228,\n        alphaTarget: 0.1\n    },\n    centering: {\n        x: 0,\n        y: 0,\n        strength: 1\n    },\n    collision: {\n        radius: 15,\n        strength: 1,\n        iterations: 1\n    },\n    links: {\n        distance: $06d3d6cf54a075da$var$DEFAULT_LINK_DISTANCE,\n        strength: undefined,\n        iterations: 1\n    },\n    manyBody: {\n        strength: -100,\n        theta: 0.9,\n        distanceMin: 0,\n        distanceMax: $06d3d6cf54a075da$export$1263b77674171074($06d3d6cf54a075da$var$DEFAULT_LINK_DISTANCE)\n    },\n    positioning: {\n        forceX: {\n            x: 0,\n            strength: 0.1\n        },\n        forceY: {\n            y: 0,\n            strength: 0.1\n        }\n    }\n};\nclass $06d3d6cf54a075da$export$8baeeaf46c1c79cd extends (0, $8c3669d8e468947b$export$4293555f241ae35a) {\n    constructor(settings){\n        super();\n        this._edges = [];\n        this._nodes = [];\n        this._nodeIndexByNodeId = {};\n        this._isDragging = false;\n        this._isStabilizing = false;\n        this.linkForce = (0, $1b1812fc60e9d4f2$export$2e2bcd8739ae039)(this._edges).id((node)=>node.id);\n        this.simulation = (0, $57b6b5bc1eaeff34$export$2e2bcd8739ae039)(this._nodes).force(\"link\", this.linkForce).stop();\n        this.settings = Object.assign((0, $b3abb3226d80884a$export$84f041eb9803ea1f)($06d3d6cf54a075da$export$de29564508b632b2), settings);\n        this.initSimulation(this.settings);\n        this.simulation.on(\"tick\", ()=>{\n            this.emit($06d3d6cf54a075da$export$da1c198471fd31fc.TICK, {\n                nodes: this._nodes,\n                edges: this._edges\n            });\n        });\n        this.simulation.on(\"end\", ()=>{\n            this._isDragging = false;\n            this._isStabilizing = false;\n            this.emit($06d3d6cf54a075da$export$da1c198471fd31fc.END, {\n                nodes: this._nodes,\n                edges: this._edges\n            });\n        });\n    }\n    getSettings() {\n        return (0, $b3abb3226d80884a$export$84f041eb9803ea1f)(this.settings);\n    }\n    setSettings(settings) {\n        const previousSettings = this.getSettings();\n        Object.keys(settings).forEach((key)=>{\n            // @ts-ignore\n            this.settings[key] = settings[key];\n        });\n        if ((0, $b3abb3226d80884a$export$2ec3988ee92e21d0)(this.settings, previousSettings)) return;\n        this.initSimulation(settings);\n        this.emit($06d3d6cf54a075da$export$da1c198471fd31fc.SETTINGS_UPDATE, {\n            settings: this.settings\n        });\n        this.runSimulation({\n            isUpdatingSettings: true\n        });\n    }\n    startDragNode() {\n        this._isDragging = true;\n        if (!this._isStabilizing && this.settings.isPhysicsEnabled) this.activateSimulation();\n    }\n    dragNode(data) {\n        const node = this._nodes[this._nodeIndexByNodeId[data.id]];\n        if (!node) return;\n        if (!this._isDragging) this.startDragNode();\n        node.fx = data.x;\n        node.fy = data.y;\n        if (!this.settings.isPhysicsEnabled) {\n            node.x = data.x;\n            node.y = data.y;\n            // Notify the client that the node position changed.\n            // This is otherwise handled by the simulation tick if physics is enabled.\n            this.emit($06d3d6cf54a075da$export$da1c198471fd31fc.NODE_DRAG, {\n                nodes: this._nodes,\n                edges: this._edges\n            });\n        }\n    }\n    endDragNode(data) {\n        this._isDragging = false;\n        this.simulation.alphaTarget(0);\n        const node = this._nodes[this._nodeIndexByNodeId[data.id]];\n        if (node && this.settings.isPhysicsEnabled) $06d3d6cf54a075da$var$releaseNode(node);\n    }\n    // Re-heat simulation.\n    // This does not count as \"stabilization\" and won't emit any progress.\n    activateSimulation() {\n        if (this.settings.isPhysicsEnabled) {\n            this.simulation.alphaTarget(this.settings.alpha.alphaTarget).restart();\n            this.releaseNodes();\n        }\n    }\n    fixDefinedNodes(data) {\n        // Treat nodes that have existing coordinates as \"fixed\".\n        for(let i = 0; i < data.nodes.length; i++){\n            if (data.nodes[i].x !== null && data.nodes[i].x !== undefined) data.nodes[i].fx = data.nodes[i].x;\n            if (data.nodes[i].y !== null && data.nodes[i].y !== undefined) data.nodes[i].fy = data.nodes[i].y;\n        }\n        return data;\n    }\n    addData(data) {\n        data = this.fixDefinedNodes(data);\n        this._nodes.concat(data.nodes);\n        this._edges.concat(data.edges);\n        this.setNodeIndexByNodeId();\n    }\n    clearData() {\n        this._nodes = [];\n        this._edges = [];\n        this.setNodeIndexByNodeId();\n    }\n    setData(data) {\n        data = this.fixDefinedNodes(data);\n        this.clearData();\n        this.addData(data);\n    }\n    updateData(data) {\n        data = this.fixDefinedNodes(data);\n        // Keep existing nodes along with their (x, y, fx, fy) coordinates to avoid\n        // rearranging the graph layout.\n        // These nodes should not be reloaded into the array because the D3 simulation\n        // will assign to them completely new coordinates, effectively restarting the animation.\n        const newNodeIds = new Set(data.nodes.map((node)=>node.id));\n        // Remove old nodes that aren't present in the new data.\n        const oldNodes = this._nodes.filter((node)=>newNodeIds.has(node.id));\n        const newNodes = data.nodes.filter((node)=>this._nodeIndexByNodeId[node.id] === undefined);\n        this._nodes = [\n            ...oldNodes,\n            ...newNodes\n        ];\n        this.setNodeIndexByNodeId();\n        // Only keep new links and discard all old links.\n        // Old links won't work as some discrepancies arise between the D3 index property\n        // and Memgraph's `id` property which affects the source->target mapping.\n        this._edges = data.edges;\n        // Update simulation with new data.\n        this.simulation.nodes(this._nodes);\n        this.linkForce.links(this._edges);\n    }\n    simulate() {\n        // Update simulation with new data.\n        this.simulation.nodes(this._nodes);\n        this.linkForce.links(this._edges);\n        // Run simulation \"physics\".\n        this.runSimulation();\n        if (!this.settings.isPhysicsEnabled) this.fixNodes();\n    }\n    startSimulation(data) {\n        this.setData(data);\n        // Update simulation with new data.\n        this.simulation.nodes(this._nodes);\n        this.linkForce.links(this._edges);\n        // Run simulation \"physics\".\n        this.runSimulation();\n    }\n    updateSimulation(data) {\n        // To avoid rearranging the graph layout during node expand/collapse/hide,\n        // it is necessary to keep existing nodes along with their (x, y) coordinates.\n        // These nodes should not be reloaded into the array because the D3 simulation\n        // will assign to them completely new coordinates, effectively restarting the animation.\n        const newNodeIds = new Set(data.nodes.map((node)=>node.id));\n        // const newNodes = data.nodes.filter((node) => !this.nodeIdentities.has(node.id));\n        const newNodes = data.nodes.filter((node)=>this._nodeIndexByNodeId[node.id] === undefined);\n        const oldNodes = this._nodes.filter((node)=>newNodeIds.has(node.id));\n        if (!this.settings.isPhysicsEnabled) oldNodes.forEach((node)=>$06d3d6cf54a075da$var$fixNode(node));\n        // Remove old nodes that aren't present in the new data.\n        this._nodes = [\n            ...oldNodes,\n            ...newNodes\n        ];\n        this.setNodeIndexByNodeId();\n        // Only keep new links and discard all old links.\n        // Old links won't work as some discrepancies arise between the D3 index property\n        // and Memgraph's `id` property which affects the source->target mapping.\n        this._edges = data.edges;\n        // Update simulation with new data.\n        this.simulation.nodes(this._nodes);\n        this.linkForce.links(this._edges);\n        // If there are no new nodes, there is no need for the simulation\n        if (!this.settings.isPhysicsEnabled && !newNodes.length) {\n            this.emit($06d3d6cf54a075da$export$da1c198471fd31fc.SIMULATION_END, {\n                nodes: this._nodes,\n                edges: this._edges\n            });\n            return;\n        }\n        // Run simulation \"physics\".\n        this.runSimulation({\n            isUpdatingSettings: true\n        });\n    }\n    stopSimulation() {\n        this.simulation.stop();\n        this._nodes = [];\n        this._edges = [];\n        this.setNodeIndexByNodeId();\n        this.simulation.nodes();\n        this.linkForce.links();\n    }\n    initSimulation(settings) {\n        var _a, _b, _c, _d;\n        if (settings.alpha) this.simulation.alpha(settings.alpha.alpha).alphaMin(settings.alpha.alphaMin).alphaDecay(settings.alpha.alphaDecay).alphaTarget(settings.alpha.alphaTarget);\n        if (settings.links) this.linkForce.distance(settings.links.distance).iterations(settings.links.iterations);\n        if (settings.collision) {\n            const collision = (0, $475094b0adc72c69$export$2e2bcd8739ae039)().radius(settings.collision.radius).strength(settings.collision.strength).iterations(settings.collision.iterations);\n            this.simulation.force(\"collide\", collision);\n        }\n        if (settings.collision === null) this.simulation.force(\"collide\", null);\n        if (settings.manyBody) {\n            const manyBody = (0, $8e47629a37da1438$export$2e2bcd8739ae039)().strength(settings.manyBody.strength).theta(settings.manyBody.theta).distanceMin(settings.manyBody.distanceMin).distanceMax(settings.manyBody.distanceMax);\n            this.simulation.force(\"charge\", manyBody);\n        }\n        if (settings.manyBody === null) this.simulation.force(\"charge\", null);\n        if ((_a = settings.positioning) === null || _a === void 0 ? void 0 : _a.forceY) {\n            const positioningForceX = (0, $85fffa1433524720$export$2e2bcd8739ae039)(settings.positioning.forceX.x).strength(settings.positioning.forceX.strength);\n            this.simulation.force(\"x\", positioningForceX);\n        }\n        if (((_b = settings.positioning) === null || _b === void 0 ? void 0 : _b.forceX) === null) this.simulation.force(\"x\", null);\n        if ((_c = settings.positioning) === null || _c === void 0 ? void 0 : _c.forceY) {\n            const positioningForceY = (0, $07de9cc8eef6ec5b$export$2e2bcd8739ae039)(settings.positioning.forceY.y).strength(settings.positioning.forceY.strength);\n            this.simulation.force(\"y\", positioningForceY);\n        }\n        if (((_d = settings.positioning) === null || _d === void 0 ? void 0 : _d.forceY) === null) this.simulation.force(\"y\", null);\n        if (settings.centering) {\n            const centering = (0, $970b3c3e19cf97c8$export$2e2bcd8739ae039)(settings.centering.x, settings.centering.y).strength(settings.centering.strength);\n            this.simulation.force(\"center\", centering);\n        }\n        if (settings.centering === null) this.simulation.force(\"center\", null);\n    }\n    // This is a blocking action - the user will not be able to interact with the graph\n    // during the simulation process.\n    runSimulation(options) {\n        if (this._isStabilizing) return;\n        if (this.settings.isPhysicsEnabled || (options === null || options === void 0 ? void 0 : options.isUpdatingSettings)) this.releaseNodes();\n        this.emit($06d3d6cf54a075da$export$da1c198471fd31fc.SIMULATION_START, undefined);\n        this._isStabilizing = true;\n        this.simulation.alpha(this.settings.alpha.alpha).alphaTarget(this.settings.alpha.alphaTarget).stop();\n        const totalSimulationSteps = Math.ceil(Math.log(this.settings.alpha.alphaMin) / Math.log(1 - this.settings.alpha.alphaDecay));\n        let lastProgress = -1;\n        for(let i = 0; i < totalSimulationSteps; i++){\n            const currentProgress = Math.round(i * 100 / totalSimulationSteps);\n            // Emit progress maximum of 100 times (every percent)\n            if (currentProgress > lastProgress) {\n                lastProgress = currentProgress;\n                this.emit($06d3d6cf54a075da$export$da1c198471fd31fc.SIMULATION_PROGRESS, {\n                    nodes: this._nodes,\n                    edges: this._edges,\n                    progress: currentProgress / 100\n                });\n            }\n            this.simulation.tick();\n        }\n        if (!this.settings.isPhysicsEnabled) this.fixNodes();\n        this._isStabilizing = false;\n        this.emit($06d3d6cf54a075da$export$da1c198471fd31fc.SIMULATION_END, {\n            nodes: this._nodes,\n            edges: this._edges\n        });\n    }\n    setNodeIndexByNodeId() {\n        this._nodeIndexByNodeId = {};\n        for(let i = 0; i < this._nodes.length; i++)this._nodeIndexByNodeId[this._nodes[i].id] = i;\n    }\n    fixNodes(nodes) {\n        if (!nodes) nodes = this._nodes;\n        for(let i = 0; i < nodes.length; i++)$06d3d6cf54a075da$var$fixNode(this._nodes[i]);\n    }\n    releaseNodes(nodes) {\n        if (!nodes) nodes = this._nodes;\n        for(let i = 0; i < nodes.length; i++)$06d3d6cf54a075da$var$releaseNode(this._nodes[i]);\n    }\n}\nconst $06d3d6cf54a075da$var$fixNode = (node)=>{\n    // fx and fy fix the node position in the D3 simulation.\n    node.fx = node.x;\n    node.fy = node.y;\n};\nconst $06d3d6cf54a075da$var$releaseNode = (node)=>{\n    node.fx = null;\n    node.fy = null;\n};\n\n\n// Messages are objects going into the simulation worker.\n// They can be thought of similar to requests.\n// (not quite as there is no immediate response to a request)\nvar $7a4feef5eb6a9dc7$export$454a134d4a7d4ad;\n(function(WorkerInputType) {\n    // Set node and edge data without simulating\n    WorkerInputType[\"SetData\"] = \"Set Data\";\n    WorkerInputType[\"AddData\"] = \"Add Data\";\n    WorkerInputType[\"UpdateData\"] = \"Update Data\";\n    WorkerInputType[\"ClearData\"] = \"Clear Data\";\n    // Simulation message types\n    WorkerInputType[\"Simulate\"] = \"Simulate\";\n    WorkerInputType[\"ActivateSimulation\"] = \"Activate Simulation\";\n    WorkerInputType[\"StartSimulation\"] = \"Start Simulation\";\n    WorkerInputType[\"UpdateSimulation\"] = \"Update Simulation\";\n    WorkerInputType[\"StopSimulation\"] = \"Stop Simulation\";\n    // Node dragging message types\n    WorkerInputType[\"StartDragNode\"] = \"Start Drag Node\";\n    WorkerInputType[\"DragNode\"] = \"Drag Node\";\n    WorkerInputType[\"EndDragNode\"] = \"End Drag Node\";\n    WorkerInputType[\"FixNodes\"] = \"Fix Nodes\";\n    WorkerInputType[\"ReleaseNodes\"] = \"Release Nodes\";\n    // Settings and special params\n    WorkerInputType[\"SetSettings\"] = \"Set Settings\";\n})($7a4feef5eb6a9dc7$export$454a134d4a7d4ad || ($7a4feef5eb6a9dc7$export$454a134d4a7d4ad = {}));\n\n\nvar $7501b447282bb453$export$b7621e1654990472;\n(function(WorkerOutputType) {\n    WorkerOutputType[\"SIMULATION_START\"] = \"simulation-start\";\n    WorkerOutputType[\"SIMULATION_PROGRESS\"] = \"simulation-progress\";\n    WorkerOutputType[\"SIMULATION_END\"] = \"simulation-end\";\n    WorkerOutputType[\"NODE_DRAG\"] = \"node-drag\";\n    WorkerOutputType[\"NODE_DRAG_END\"] = \"node-drag-end\";\n    WorkerOutputType[\"SETTINGS_UPDATE\"] = \"settings-update\";\n})($7501b447282bb453$export$b7621e1654990472 || ($7501b447282bb453$export$b7621e1654990472 = {}));\n\n\nconst $9acc002fb81d8d7e$var$simulator = new (0, $06d3d6cf54a075da$export$8baeeaf46c1c79cd)();\nconst $9acc002fb81d8d7e$var$emitToMain = (message)=>{\n    // @ts-ignore Web worker postMessage is a global function\n    postMessage(message);\n};\n$9acc002fb81d8d7e$var$simulator.on((0, $06d3d6cf54a075da$export$da1c198471fd31fc).TICK, (data)=>{\n    $9acc002fb81d8d7e$var$emitToMain({\n        type: (0, $7501b447282bb453$export$b7621e1654990472).NODE_DRAG,\n        data: data\n    });\n});\n$9acc002fb81d8d7e$var$simulator.on((0, $06d3d6cf54a075da$export$da1c198471fd31fc).END, (data)=>{\n    $9acc002fb81d8d7e$var$emitToMain({\n        type: (0, $7501b447282bb453$export$b7621e1654990472).NODE_DRAG_END,\n        data: data\n    });\n});\n$9acc002fb81d8d7e$var$simulator.on((0, $06d3d6cf54a075da$export$da1c198471fd31fc).SIMULATION_START, ()=>{\n    $9acc002fb81d8d7e$var$emitToMain({\n        type: (0, $7501b447282bb453$export$b7621e1654990472).SIMULATION_START\n    });\n});\n$9acc002fb81d8d7e$var$simulator.on((0, $06d3d6cf54a075da$export$da1c198471fd31fc).SIMULATION_PROGRESS, (data)=>{\n    $9acc002fb81d8d7e$var$emitToMain({\n        type: (0, $7501b447282bb453$export$b7621e1654990472).SIMULATION_PROGRESS,\n        data: data\n    });\n});\n$9acc002fb81d8d7e$var$simulator.on((0, $06d3d6cf54a075da$export$da1c198471fd31fc).SIMULATION_END, (data)=>{\n    $9acc002fb81d8d7e$var$emitToMain({\n        type: (0, $7501b447282bb453$export$b7621e1654990472).SIMULATION_END,\n        data: data\n    });\n});\n$9acc002fb81d8d7e$var$simulator.on((0, $06d3d6cf54a075da$export$da1c198471fd31fc).NODE_DRAG, (data)=>{\n    // Notify the client that the node position changed.\n    // This is otherwise handled by the simulation tick if physics is enabled.\n    $9acc002fb81d8d7e$var$emitToMain({\n        type: (0, $7501b447282bb453$export$b7621e1654990472).NODE_DRAG,\n        data: data\n    });\n});\n$9acc002fb81d8d7e$var$simulator.on((0, $06d3d6cf54a075da$export$da1c198471fd31fc).SETTINGS_UPDATE, (data)=>{\n    $9acc002fb81d8d7e$var$emitToMain({\n        type: (0, $7501b447282bb453$export$b7621e1654990472).SETTINGS_UPDATE,\n        data: data\n    });\n});\naddEventListener(\"message\", ({ data: data  })=>{\n    switch(data.type){\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).ActivateSimulation:\n            $9acc002fb81d8d7e$var$simulator.activateSimulation();\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).SetData:\n            $9acc002fb81d8d7e$var$simulator.setData(data.data);\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).AddData:\n            $9acc002fb81d8d7e$var$simulator.addData(data.data);\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).UpdateData:\n            $9acc002fb81d8d7e$var$simulator.updateData(data.data);\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).ClearData:\n            $9acc002fb81d8d7e$var$simulator.clearData();\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).Simulate:\n            $9acc002fb81d8d7e$var$simulator.simulate();\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).StartSimulation:\n            $9acc002fb81d8d7e$var$simulator.startSimulation(data.data);\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).UpdateSimulation:\n            $9acc002fb81d8d7e$var$simulator.updateSimulation(data.data);\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).StopSimulation:\n            $9acc002fb81d8d7e$var$simulator.stopSimulation();\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).StartDragNode:\n            $9acc002fb81d8d7e$var$simulator.startDragNode();\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).DragNode:\n            $9acc002fb81d8d7e$var$simulator.dragNode(data.data);\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).FixNodes:\n            $9acc002fb81d8d7e$var$simulator.fixNodes(data.data.nodes);\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).ReleaseNodes:\n            $9acc002fb81d8d7e$var$simulator.releaseNodes(data.data.nodes);\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).EndDragNode:\n            $9acc002fb81d8d7e$var$simulator.endDragNode(data.data);\n            break;\n        case (0, $7a4feef5eb6a9dc7$export$454a134d4a7d4ad).SetSettings:\n            $9acc002fb81d8d7e$var$simulator.setSettings(data.data);\n            break;\n    }\n});\n\n})();\n//# sourceMappingURL=process.worker.6458fd74.js.map\n","// / <reference lib=\"webworker\" />\nimport { D3SimulatorEngine, D3SimulatorEngineEventType } from '../../engine/d3-simulator-engine';\nimport { WorkerInputType } from './message/worker-input';\nimport { WorkerOutputType } from './message/worker-output';\nconst simulator = new D3SimulatorEngine();\nconst emitToMain = (message) => {\n    // @ts-ignore Web worker postMessage is a global function\n    postMessage(message);\n};\nsimulator.on(D3SimulatorEngineEventType.TICK, (data) => {\n    emitToMain({ type: WorkerOutputType.NODE_DRAG, data });\n});\nsimulator.on(D3SimulatorEngineEventType.END, (data) => {\n    emitToMain({ type: WorkerOutputType.NODE_DRAG_END, data });\n});\nsimulator.on(D3SimulatorEngineEventType.SIMULATION_START, () => {\n    emitToMain({ type: WorkerOutputType.SIMULATION_START });\n});\nsimulator.on(D3SimulatorEngineEventType.SIMULATION_PROGRESS, (data) => {\n    emitToMain({ type: WorkerOutputType.SIMULATION_PROGRESS, data });\n});\nsimulator.on(D3SimulatorEngineEventType.SIMULATION_END, (data) => {\n    emitToMain({ type: WorkerOutputType.SIMULATION_END, data });\n});\nsimulator.on(D3SimulatorEngineEventType.NODE_DRAG, (data) => {\n    // Notify the client that the node position changed.\n    // This is otherwise handled by the simulation tick if physics is enabled.\n    emitToMain({ type: WorkerOutputType.NODE_DRAG, data });\n});\nsimulator.on(D3SimulatorEngineEventType.SETTINGS_UPDATE, (data) => {\n    emitToMain({ type: WorkerOutputType.SETTINGS_UPDATE, data });\n});\naddEventListener('message', ({ data }) => {\n    switch (data.type) {\n        case WorkerInputType.ActivateSimulation: {\n            simulator.activateSimulation();\n            break;\n        }\n        case WorkerInputType.SetData: {\n            simulator.setData(data.data);\n            break;\n        }\n        case WorkerInputType.AddData: {\n            simulator.addData(data.data);\n            break;\n        }\n        case WorkerInputType.UpdateData: {\n            simulator.updateData(data.data);\n            break;\n        }\n        case WorkerInputType.ClearData: {\n            simulator.clearData();\n            break;\n        }\n        case WorkerInputType.Simulate: {\n            simulator.simulate();\n            break;\n        }\n        case WorkerInputType.StartSimulation: {\n            simulator.startSimulation(data.data);\n            break;\n        }\n        case WorkerInputType.UpdateSimulation: {\n            simulator.updateSimulation(data.data);\n            break;\n        }\n        case WorkerInputType.StopSimulation: {\n            simulator.stopSimulation();\n            break;\n        }\n        case WorkerInputType.StartDragNode: {\n            simulator.startDragNode();\n            break;\n        }\n        case WorkerInputType.DragNode: {\n            simulator.dragNode(data.data);\n            break;\n        }\n        case WorkerInputType.FixNodes: {\n            simulator.fixNodes(data.data.nodes);\n            break;\n        }\n        case WorkerInputType.ReleaseNodes: {\n            simulator.releaseNodes(data.data.nodes);\n            break;\n        }\n        case WorkerInputType.EndDragNode: {\n            simulator.endDragNode(data.data);\n            break;\n        }\n        case WorkerInputType.SetSettings: {\n            simulator.setSettings(data.data);\n            break;\n        }\n    }\n});\n//# sourceMappingURL=process.worker.js.map",null,"import { forceCenter, forceCollide, forceLink, forceManyBody, forceSimulation, forceX, forceY, } from 'd3-force';\nimport { Emitter } from '../../utils/emitter.utils';\nimport { isObjectEqual, copyObject } from '../../utils/object.utils';\nconst MANY_BODY_MAX_DISTANCE_TO_LINK_DISTANCE_RATIO = 100;\nconst DEFAULT_LINK_DISTANCE = 30;\nexport var D3SimulatorEngineEventType;\n(function (D3SimulatorEngineEventType) {\n    D3SimulatorEngineEventType[\"TICK\"] = \"tick\";\n    D3SimulatorEngineEventType[\"END\"] = \"end\";\n    D3SimulatorEngineEventType[\"SIMULATION_START\"] = \"simulation-start\";\n    D3SimulatorEngineEventType[\"SIMULATION_PROGRESS\"] = \"simulation-progress\";\n    D3SimulatorEngineEventType[\"SIMULATION_END\"] = \"simulation-end\";\n    D3SimulatorEngineEventType[\"NODE_DRAG\"] = \"node-drag\";\n    D3SimulatorEngineEventType[\"SETTINGS_UPDATE\"] = \"settings-update\";\n})(D3SimulatorEngineEventType || (D3SimulatorEngineEventType = {}));\nexport const getManyBodyMaxDistance = (linkDistance) => {\n    const distance = linkDistance > 0 ? linkDistance : 1;\n    return distance * MANY_BODY_MAX_DISTANCE_TO_LINK_DISTANCE_RATIO;\n};\nexport const DEFAULT_SETTINGS = {\n    isPhysicsEnabled: false,\n    alpha: {\n        alpha: 1,\n        alphaMin: 0.001,\n        alphaDecay: 0.0228,\n        alphaTarget: 0.1,\n    },\n    centering: {\n        x: 0,\n        y: 0,\n        strength: 1,\n    },\n    collision: {\n        radius: 15,\n        strength: 1,\n        iterations: 1,\n    },\n    links: {\n        distance: DEFAULT_LINK_DISTANCE,\n        strength: undefined,\n        iterations: 1,\n    },\n    manyBody: {\n        strength: -100,\n        theta: 0.9,\n        distanceMin: 0,\n        distanceMax: getManyBodyMaxDistance(DEFAULT_LINK_DISTANCE),\n    },\n    positioning: {\n        forceX: {\n            x: 0,\n            strength: 0.1,\n        },\n        forceY: {\n            y: 0,\n            strength: 0.1,\n        },\n    },\n};\nexport class D3SimulatorEngine extends Emitter {\n    constructor(settings) {\n        super();\n        this._edges = [];\n        this._nodes = [];\n        this._nodeIndexByNodeId = {};\n        this._isDragging = false;\n        this._isStabilizing = false;\n        this.linkForce = forceLink(this._edges).id((node) => node.id);\n        this.simulation = forceSimulation(this._nodes).force('link', this.linkForce).stop();\n        this.settings = Object.assign(copyObject(DEFAULT_SETTINGS), settings);\n        this.initSimulation(this.settings);\n        this.simulation.on('tick', () => {\n            this.emit(D3SimulatorEngineEventType.TICK, { nodes: this._nodes, edges: this._edges });\n        });\n        this.simulation.on('end', () => {\n            this._isDragging = false;\n            this._isStabilizing = false;\n            this.emit(D3SimulatorEngineEventType.END, { nodes: this._nodes, edges: this._edges });\n        });\n    }\n    getSettings() {\n        return copyObject(this.settings);\n    }\n    setSettings(settings) {\n        const previousSettings = this.getSettings();\n        Object.keys(settings).forEach((key) => {\n            // @ts-ignore\n            this.settings[key] = settings[key];\n        });\n        if (isObjectEqual(this.settings, previousSettings)) {\n            return;\n        }\n        this.initSimulation(settings);\n        this.emit(D3SimulatorEngineEventType.SETTINGS_UPDATE, { settings: this.settings });\n        this.runSimulation({ isUpdatingSettings: true });\n    }\n    startDragNode() {\n        this._isDragging = true;\n        if (!this._isStabilizing && this.settings.isPhysicsEnabled) {\n            this.activateSimulation();\n        }\n    }\n    dragNode(data) {\n        const node = this._nodes[this._nodeIndexByNodeId[data.id]];\n        if (!node) {\n            return;\n        }\n        if (!this._isDragging) {\n            this.startDragNode();\n        }\n        node.fx = data.x;\n        node.fy = data.y;\n        if (!this.settings.isPhysicsEnabled) {\n            node.x = data.x;\n            node.y = data.y;\n            // Notify the client that the node position changed.\n            // This is otherwise handled by the simulation tick if physics is enabled.\n            this.emit(D3SimulatorEngineEventType.NODE_DRAG, { nodes: this._nodes, edges: this._edges });\n        }\n    }\n    endDragNode(data) {\n        this._isDragging = false;\n        this.simulation.alphaTarget(0);\n        const node = this._nodes[this._nodeIndexByNodeId[data.id]];\n        if (node && this.settings.isPhysicsEnabled) {\n            releaseNode(node);\n        }\n    }\n    // Re-heat simulation.\n    // This does not count as \"stabilization\" and won't emit any progress.\n    activateSimulation() {\n        if (this.settings.isPhysicsEnabled) {\n            this.simulation.alphaTarget(this.settings.alpha.alphaTarget).restart();\n            this.releaseNodes();\n        }\n    }\n    fixDefinedNodes(data) {\n        // Treat nodes that have existing coordinates as \"fixed\".\n        for (let i = 0; i < data.nodes.length; i++) {\n            if (data.nodes[i].x !== null && data.nodes[i].x !== undefined) {\n                data.nodes[i].fx = data.nodes[i].x;\n            }\n            if (data.nodes[i].y !== null && data.nodes[i].y !== undefined) {\n                data.nodes[i].fy = data.nodes[i].y;\n            }\n        }\n        return data;\n    }\n    addData(data) {\n        data = this.fixDefinedNodes(data);\n        this._nodes.concat(data.nodes);\n        this._edges.concat(data.edges);\n        this.setNodeIndexByNodeId();\n    }\n    clearData() {\n        this._nodes = [];\n        this._edges = [];\n        this.setNodeIndexByNodeId();\n    }\n    setData(data) {\n        data = this.fixDefinedNodes(data);\n        this.clearData();\n        this.addData(data);\n    }\n    updateData(data) {\n        data = this.fixDefinedNodes(data);\n        // Keep existing nodes along with their (x, y, fx, fy) coordinates to avoid\n        // rearranging the graph layout.\n        // These nodes should not be reloaded into the array because the D3 simulation\n        // will assign to them completely new coordinates, effectively restarting the animation.\n        const newNodeIds = new Set(data.nodes.map((node) => node.id));\n        // Remove old nodes that aren't present in the new data.\n        const oldNodes = this._nodes.filter((node) => newNodeIds.has(node.id));\n        const newNodes = data.nodes.filter((node) => this._nodeIndexByNodeId[node.id] === undefined);\n        this._nodes = [...oldNodes, ...newNodes];\n        this.setNodeIndexByNodeId();\n        // Only keep new links and discard all old links.\n        // Old links won't work as some discrepancies arise between the D3 index property\n        // and Memgraph's `id` property which affects the source->target mapping.\n        this._edges = data.edges;\n        // Update simulation with new data.\n        this.simulation.nodes(this._nodes);\n        this.linkForce.links(this._edges);\n    }\n    simulate() {\n        // Update simulation with new data.\n        this.simulation.nodes(this._nodes);\n        this.linkForce.links(this._edges);\n        // Run simulation \"physics\".\n        this.runSimulation();\n        if (!this.settings.isPhysicsEnabled) {\n            this.fixNodes();\n        }\n    }\n    startSimulation(data) {\n        this.setData(data);\n        // Update simulation with new data.\n        this.simulation.nodes(this._nodes);\n        this.linkForce.links(this._edges);\n        // Run simulation \"physics\".\n        this.runSimulation();\n    }\n    updateSimulation(data) {\n        // To avoid rearranging the graph layout during node expand/collapse/hide,\n        // it is necessary to keep existing nodes along with their (x, y) coordinates.\n        // These nodes should not be reloaded into the array because the D3 simulation\n        // will assign to them completely new coordinates, effectively restarting the animation.\n        const newNodeIds = new Set(data.nodes.map((node) => node.id));\n        // const newNodes = data.nodes.filter((node) => !this.nodeIdentities.has(node.id));\n        const newNodes = data.nodes.filter((node) => this._nodeIndexByNodeId[node.id] === undefined);\n        const oldNodes = this._nodes.filter((node) => newNodeIds.has(node.id));\n        if (!this.settings.isPhysicsEnabled) {\n            oldNodes.forEach((node) => fixNode(node));\n        }\n        // Remove old nodes that aren't present in the new data.\n        this._nodes = [...oldNodes, ...newNodes];\n        this.setNodeIndexByNodeId();\n        // Only keep new links and discard all old links.\n        // Old links won't work as some discrepancies arise between the D3 index property\n        // and Memgraph's `id` property which affects the source->target mapping.\n        this._edges = data.edges;\n        // Update simulation with new data.\n        this.simulation.nodes(this._nodes);\n        this.linkForce.links(this._edges);\n        // If there are no new nodes, there is no need for the simulation\n        if (!this.settings.isPhysicsEnabled && !newNodes.length) {\n            this.emit(D3SimulatorEngineEventType.SIMULATION_END, { nodes: this._nodes, edges: this._edges });\n            return;\n        }\n        // Run simulation \"physics\".\n        this.runSimulation({ isUpdatingSettings: true });\n    }\n    stopSimulation() {\n        this.simulation.stop();\n        this._nodes = [];\n        this._edges = [];\n        this.setNodeIndexByNodeId();\n        this.simulation.nodes();\n        this.linkForce.links();\n    }\n    initSimulation(settings) {\n        var _a, _b, _c, _d;\n        if (settings.alpha) {\n            this.simulation\n                .alpha(settings.alpha.alpha)\n                .alphaMin(settings.alpha.alphaMin)\n                .alphaDecay(settings.alpha.alphaDecay)\n                .alphaTarget(settings.alpha.alphaTarget);\n        }\n        if (settings.links) {\n            this.linkForce.distance(settings.links.distance).iterations(settings.links.iterations);\n        }\n        if (settings.collision) {\n            const collision = forceCollide()\n                .radius(settings.collision.radius)\n                .strength(settings.collision.strength)\n                .iterations(settings.collision.iterations);\n            this.simulation.force('collide', collision);\n        }\n        if (settings.collision === null) {\n            this.simulation.force('collide', null);\n        }\n        if (settings.manyBody) {\n            const manyBody = forceManyBody()\n                .strength(settings.manyBody.strength)\n                .theta(settings.manyBody.theta)\n                .distanceMin(settings.manyBody.distanceMin)\n                .distanceMax(settings.manyBody.distanceMax);\n            this.simulation.force('charge', manyBody);\n        }\n        if (settings.manyBody === null) {\n            this.simulation.force('charge', null);\n        }\n        if ((_a = settings.positioning) === null || _a === void 0 ? void 0 : _a.forceY) {\n            const positioningForceX = forceX(settings.positioning.forceX.x).strength(settings.positioning.forceX.strength);\n            this.simulation.force('x', positioningForceX);\n        }\n        if (((_b = settings.positioning) === null || _b === void 0 ? void 0 : _b.forceX) === null) {\n            this.simulation.force('x', null);\n        }\n        if ((_c = settings.positioning) === null || _c === void 0 ? void 0 : _c.forceY) {\n            const positioningForceY = forceY(settings.positioning.forceY.y).strength(settings.positioning.forceY.strength);\n            this.simulation.force('y', positioningForceY);\n        }\n        if (((_d = settings.positioning) === null || _d === void 0 ? void 0 : _d.forceY) === null) {\n            this.simulation.force('y', null);\n        }\n        if (settings.centering) {\n            const centering = forceCenter(settings.centering.x, settings.centering.y).strength(settings.centering.strength);\n            this.simulation.force('center', centering);\n        }\n        if (settings.centering === null) {\n            this.simulation.force('center', null);\n        }\n    }\n    // This is a blocking action - the user will not be able to interact with the graph\n    // during the simulation process.\n    runSimulation(options) {\n        if (this._isStabilizing) {\n            return;\n        }\n        if (this.settings.isPhysicsEnabled || (options === null || options === void 0 ? void 0 : options.isUpdatingSettings)) {\n            this.releaseNodes();\n        }\n        this.emit(D3SimulatorEngineEventType.SIMULATION_START, undefined);\n        this._isStabilizing = true;\n        this.simulation.alpha(this.settings.alpha.alpha).alphaTarget(this.settings.alpha.alphaTarget).stop();\n        const totalSimulationSteps = Math.ceil(Math.log(this.settings.alpha.alphaMin) / Math.log(1 - this.settings.alpha.alphaDecay));\n        let lastProgress = -1;\n        for (let i = 0; i < totalSimulationSteps; i++) {\n            const currentProgress = Math.round((i * 100) / totalSimulationSteps);\n            // Emit progress maximum of 100 times (every percent)\n            if (currentProgress > lastProgress) {\n                lastProgress = currentProgress;\n                this.emit(D3SimulatorEngineEventType.SIMULATION_PROGRESS, {\n                    nodes: this._nodes,\n                    edges: this._edges,\n                    progress: currentProgress / 100,\n                });\n            }\n            this.simulation.tick();\n        }\n        if (!this.settings.isPhysicsEnabled) {\n            this.fixNodes();\n        }\n        this._isStabilizing = false;\n        this.emit(D3SimulatorEngineEventType.SIMULATION_END, { nodes: this._nodes, edges: this._edges });\n    }\n    setNodeIndexByNodeId() {\n        this._nodeIndexByNodeId = {};\n        for (let i = 0; i < this._nodes.length; i++) {\n            this._nodeIndexByNodeId[this._nodes[i].id] = i;\n        }\n    }\n    fixNodes(nodes) {\n        if (!nodes) {\n            nodes = this._nodes;\n        }\n        for (let i = 0; i < nodes.length; i++) {\n            fixNode(this._nodes[i]);\n        }\n    }\n    releaseNodes(nodes) {\n        if (!nodes) {\n            nodes = this._nodes;\n        }\n        for (let i = 0; i < nodes.length; i++) {\n            releaseNode(this._nodes[i]);\n        }\n    }\n}\nconst fixNode = (node) => {\n    // fx and fy fix the node position in the D3 simulation.\n    node.fx = node.x;\n    node.fy = node.y;\n};\nconst releaseNode = (node) => {\n    node.fx = null;\n    node.fy = null;\n};\n//# sourceMappingURL=d3-simulator-engine.js.map",null,"export default function(x, y) {\n  var nodes, strength = 1;\n\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force() {\n    var i,\n        n = nodes.length,\n        node,\n        sx = 0,\n        sy = 0;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], sx += node.x, sy += node.y;\n    }\n\n    for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {\n      node = nodes[i], node.x -= sx, node.y -= sy;\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  return force;\n}\n","import {quadtree} from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function(radius) {\n  var nodes,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data, rj = quad.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(random), l += x * x;\n            if (y === 0) y = jiggle(random), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n","import tree_add, {addAll as tree_addAll} from \"./add.js\";\nimport tree_cover from \"./cover.js\";\nimport tree_data from \"./data.js\";\nimport tree_extent from \"./extent.js\";\nimport tree_find from \"./find.js\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove.js\";\nimport tree_root from \"./root.js\";\nimport tree_size from \"./size.js\";\nimport tree_visit from \"./visit.js\";\nimport tree_visitAfter from \"./visitAfter.js\";\nimport tree_x, {defaultX} from \"./x.js\";\nimport tree_y, {defaultY} from \"./y.js\";\n\nexport default function quadtree(nodes, x, y) {\n  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Quadtree(x, y, x0, y0, x1, y1) {\n  this._x = x;\n  this._y = y;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = quadtree.prototype = Quadtree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(4)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 4; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\n","export default function(d) {\n  const x = +this._x.call(null, d),\n      y = +this._y.call(null, d);\n  return add(this.cover(x, y), x, y, d);\n}\n\nfunction add(tree, x, y, d) {\n  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      y0 = tree._y0,\n      x1 = tree._x1,\n      y1 = tree._y1,\n      xm,\n      ym,\n      xp,\n      yp,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  yp = +tree._y.call(null, node.data);\n  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  var d, i, n = data.length,\n      x,\n      y,\n      xz = new Array(n),\n      yz = new Array(n),\n      x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (i = 0; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n    xz[i] = x;\n    yz[i] = y;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  // If there were no (valid) points, abort.\n  if (x0 > x1 || y0 > y1) return this;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0, y0).cover(x1, y1);\n\n  // Add the new points.\n  for (i = 0; i < n; ++i) {\n    add(this, xz[i], yz[i], data[i]);\n  }\n\n  return this;\n}\n","export default function(x, y) {\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1;\n\n  // If the quadtree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing quadrant boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var z = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1) {\n      i = (y < y0) << 1 | (x < x0);\n      parent = new Array(4), parent[i] = node, node = parent, z *= 2;\n      switch (i) {\n        case 0: x1 = x0 + z, y1 = y0 + z; break;\n        case 1: x0 = x1 - z, y1 = y0 + z; break;\n        case 2: x1 = x0 + z, y0 = y1 - z; break;\n        case 3: x0 = x1 - z, y0 = y1 - z; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  return this;\n}\n","export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n","export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n}\n","import Quad from \"./quad.js\";\n\nexport default function(x, y, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1,\n      y1,\n      x2,\n      y2,\n      x3 = this._x1,\n      y3 = this._y1,\n      quads = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius, y0 = y - radius;\n    x3 = x + radius, y3 = y + radius;\n    radius *= radius;\n  }\n\n  while (q = quads.pop()) {\n\n    // Stop searching if this quadrant can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (y1 = q.y0) > y3\n        || (x2 = q.x1) < x0\n        || (y2 = q.y1) < y0) continue;\n\n    // Bisect the current quadrant.\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2;\n\n      quads.push(\n        new Quad(node[3], xm, ym, x2, y2),\n        new Quad(node[2], x1, ym, xm, y2),\n        new Quad(node[1], xm, y1, x2, ym),\n        new Quad(node[0], x1, y1, xm, ym)\n      );\n\n      // Visit the closest quadrant first.\n      if (i = (y >= ym) << 1 | (x >= xm)) {\n        q = quads[quads.length - 1];\n        quads[quads.length - 1] = quads[quads.length - 1 - i];\n        quads[quads.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var dx = x - +this._x.call(null, node.data),\n          dy = y - +this._y.call(null, node.data),\n          d2 = dx * dx + dy * dy;\n      if (d2 < radius) {\n        var d = Math.sqrt(radius = d2);\n        x0 = x - d, y0 = y - d;\n        x3 = x + d, y3 = y + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n","export default function(node, x0, y0, x1, y1) {\n  this.node = node;\n  this.x0 = x0;\n  this.y0 = y0;\n  this.x1 = x1;\n  this.y1 = y1;\n}\n","export default function(d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1,\n      x,\n      y,\n      xm,\n      ym,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n      && node === (parent[3] || parent[2] || parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n","export default function() {\n  return this._root;\n}\n","export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n","import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n    }\n  }\n  return this;\n}\n","import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], next = [], q;\n  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.y0, q.x1, q.y1);\n  }\n  return this;\n}\n","export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n","export function defaultY(d) {\n  return d[1];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._y = _, this) : this._y;\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(random) {\n  return (random() - 0.5) * 1e-6;\n}\n","import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      random,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        y = target.y + target.vy - source.y - source.vy || jiggle(random);\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n","import {quadtree} from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport {x, y} from \"./simulation.js\";\n\nexport default function() {\n  var nodes,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i, n = nodes.length, tree = quadtree(nodes, x, y).visitAfter(accumulate);\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    strengths = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(quad) {\n    var strength = 0, q, c, weight = 0, x, y, i;\n\n    // For internal nodes, accumulate forces from child quadrants.\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n      quad.x = x / weight;\n      quad.y = y / weight;\n    }\n\n    // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n      do strength += strengths[q.data.index];\n      while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y;\n\n    // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (y === 0) y = jiggle(random), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n      return true;\n    }\n\n    // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return;\n\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (y === 0) y = jiggle(random), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (quad.data !== node) {\n      w = strengths[quad.data.index] * alpha / l;\n      node.vx += x * w;\n      node.vy += y * w;\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function(_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function(_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function(_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {timer} from \"d3-timer\";\nimport lcg from \"./lcg.js\";\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\n\nexport default function(nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = new Map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\"),\n      random = lcg();\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i, n = nodes.length, node;\n\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.forEach(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes, random);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    randomSource: function(_) {\n      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function(x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n\n      if (radius == null) radius = Infinity;\n      else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n","var noop = {value: () => {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n","var frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nexport function now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nexport function Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nexport function timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nexport function timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);\n    t = t._next;\n  }\n  --frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    frame = 1, setFrame(wake);\n  }\n}\n","// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst a = 1664525;\nconst c = 1013904223;\nconst m = 4294967296; // 2^32\n\nexport default function() {\n  let s = 1;\n  return () => (s = (a * s + c) % m) / m;\n}\n","import constant from \"./constant.js\";\n\nexport default function(x) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      xz;\n\n  if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    xz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n  };\n\n  return force;\n}\n","import constant from \"./constant.js\";\n\nexport default function(y) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      yz;\n\n  if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    yz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n  };\n\n  return force;\n}\n","export class Emitter {\n    constructor() {\n        this._listeners = new Map();\n    }\n    /**\n     * Adds a one-time listener function for the event named eventName. The next time eventName is\n     * triggered, this listener is removed and then invoked.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitteronceeventname-listener}\n     * @param {IEventKey} eventName Event name\n     * @param {IEventReceiver} func Event function\n     * @return {IEmitter} Reference to the EventEmitter, so that calls can be chained\n     */\n    once(eventName, func) {\n        const newListener = {\n            callable: func,\n            isOnce: true,\n        };\n        const listeners = this._listeners.get(eventName);\n        if (listeners) {\n            listeners.push(newListener);\n        }\n        else {\n            this._listeners.set(eventName, [newListener]);\n        }\n        return this;\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event named eventName.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of eventName and listener will result in the listener being added,\n     * and called, multiple times.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitteroneventname-listener}\n     * @param {IEventKey} eventName Event name\n     * @param {IEventReceiver} func Event function\n     * @return {IEmitter} Reference to the EventEmitter, so that calls can be chained\n     */\n    on(eventName, func) {\n        const newListener = {\n            callable: func,\n        };\n        const listeners = this._listeners.get(eventName);\n        if (listeners) {\n            listeners.push(newListener);\n        }\n        else {\n            this._listeners.set(eventName, [newListener]);\n        }\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event named eventName.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitterremovelistenereventname-listener}\n     * @param {IEventKey} eventName Event name\n     * @param {IEventReceiver} func Event function\n     * @return {IEmitter} Reference to the EventEmitter, so that calls can be chained\n     */\n    off(eventName, func) {\n        const listeners = this._listeners.get(eventName);\n        if (listeners) {\n            const filteredListeners = listeners.filter((listener) => listener.callable !== func);\n            this._listeners.set(eventName, filteredListeners);\n        }\n        return this;\n    }\n    /**\n     * Synchronously calls each of the listeners registered for the event named eventName,\n     * in the order they were registered, passing the supplied arguments to each.\n     * Returns true if the event had listeners, false otherwise.\n     *\n     * @param {IEventKey} eventName Event name\n     * @param {any} params Event parameters\n     *\n     * @return {boolean} True if the event had listeners, false otherwise\n     */\n    emit(eventName, params) {\n        const listeners = this._listeners.get(eventName);\n        if (!listeners || listeners.length === 0) {\n            return false;\n        }\n        let hasOnceListener = false;\n        for (let i = 0; i < listeners.length; i++) {\n            if (listeners[i].isOnce) {\n                hasOnceListener = true;\n            }\n            listeners[i].callable(params);\n        }\n        if (hasOnceListener) {\n            const filteredListeners = listeners.filter((listener) => !listener.isOnce);\n            this._listeners.set(eventName, filteredListeners);\n        }\n        return true;\n    }\n    /**\n     * Returns an array listing the events for which the emitter has registered listeners.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emittereventnames}\n     * @return {IEventKey[]} Event names with registered listeners\n     */\n    eventNames() {\n        return [...this._listeners.keys()];\n    }\n    /**\n     * Returns the number of listeners listening to the event named eventName.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitterlistenercounteventname}\n     * @param {IEventKey} eventName Event name\n     * @return {number} Number of listeners listening to the event name\n     */\n    listenerCount(eventName) {\n        const listeners = this._listeners.get(eventName);\n        return listeners ? listeners.length : 0;\n    }\n    /**\n     * Returns a copy of the array of listeners for the event named eventName.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitterlistenerseventname}\n     * @param {IEventKey} eventName Event name\n     * @return {IEventReceiver[]} Array of listeners for the event name\n     */\n    listeners(eventName) {\n        const listeners = this._listeners.get(eventName);\n        if (!listeners) {\n            return [];\n        }\n        return listeners.map((listener) => listener.callable);\n    }\n    /**\n     * Alias for emitter.on(eventName, listener).\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitteraddlistenereventname-listener}\n     * @param {IEventKey} eventName Event name\n     * @param {IEventReceiver} func Event function\n     * @return {IEmitter} Reference to the EventEmitter, so that calls can be chained\n     */\n    addListener(eventName, func) {\n        return this.on(eventName, func);\n    }\n    /**\n     * Alias for emitter.off(eventName, listener).\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitterremovelistenereventname-listener}\n     * @param {IEventKey} eventName Event name\n     * @param {IEventReceiver} func Event function\n     * @return {IEmitter} Reference to the EventEmitter, so that calls can be chained\n     */\n    removeListener(eventName, func) {\n        return this.off(eventName, func);\n    }\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     *\n     * @see {@link https://nodejs.org/api/events.html#emitterremovealllistenerseventname}\n     * @param {IEventKey} eventName Event name\n     * @return {IEmitter} Reference to the EventEmitter, so that calls can be chained\n     */\n    removeAllListeners(eventName) {\n        if (eventName) {\n            this._listeners.delete(eventName);\n        }\n        else {\n            this._listeners.clear();\n        }\n        return this;\n    }\n}\n//# sourceMappingURL=emitter.utils.js.map",null,"import { isArray, isDate, isPlainObject } from './type.utils';\n/**\n * Creates a new deep copy of the received object. Dates, arrays and\n * plain objects will be created as new objects (new reference).\n *\n * @param {any} obj Object\n * @return {any} Deep copied object\n */\nexport const copyObject = (obj) => {\n    if (isDate(obj)) {\n        return copyDate(obj);\n    }\n    if (isArray(obj)) {\n        return copyArray(obj);\n    }\n    if (isPlainObject(obj)) {\n        return copyPlainObject(obj);\n    }\n    // It is a primitive, function or a custom class\n    return obj;\n};\n/**\n * Checks if two objects are equal by value. It does deep checking for\n * values within arrays or plain objects. Equality for anything that is\n * not a Date, Array, or a plain object will be checked as `a === b`.\n *\n * @param {any} obj1 Object\n * @param {any} obj2 Object\n * @return {boolean} True if objects are deeply equal, otherwise false\n */\nexport const isObjectEqual = (obj1, obj2) => {\n    const isDate1 = isDate(obj1);\n    const isDate2 = isDate(obj2);\n    if ((isDate1 && !isDate2) || (!isDate1 && isDate2)) {\n        return false;\n    }\n    if (isDate1 && isDate2) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    const isArray1 = isArray(obj1);\n    const isArray2 = isArray(obj2);\n    if ((isArray1 && !isArray2) || (!isArray1 && isArray2)) {\n        return false;\n    }\n    if (isArray1 && isArray2) {\n        if (obj1.length !== obj2.length) {\n            return false;\n        }\n        return obj1.every((value, index) => {\n            return isObjectEqual(value, obj2[index]);\n        });\n    }\n    const isObject1 = isPlainObject(obj1);\n    const isObject2 = isPlainObject(obj2);\n    if ((isObject1 && !isObject2) || (!isObject1 && isObject2)) {\n        return false;\n    }\n    if (isObject1 && isObject2) {\n        const keys1 = Object.keys(obj1);\n        const keys2 = Object.keys(obj2);\n        if (!isObjectEqual(keys1, keys2)) {\n            return false;\n        }\n        return keys1.every((key) => {\n            return isObjectEqual(obj1[key], obj2[key]);\n        });\n    }\n    return obj1 === obj2;\n};\n/**\n * Copies date object into a new date object.\n *\n * @param {Date} date Date\n * @return {Date} Date object copy\n */\nconst copyDate = (date) => {\n    return new Date(date);\n};\n/**\n * Deep copies an array into a new array. Array values will\n * be deep copied too.\n *\n * @param {Array} array Array\n * @return {Array} Deep copied array\n */\nconst copyArray = (array) => {\n    return array.map((value) => copyObject(value));\n};\n/**\n * Deep copies a plain object into a new plain object. Object\n * values will be deep copied too.\n *\n * @param {Record} obj Object\n * @return {Record} Deep copied object\n */\nconst copyPlainObject = (obj) => {\n    const newObject = {};\n    Object.keys(obj).forEach((key) => {\n        newObject[key] = copyObject(obj[key]);\n    });\n    return newObject;\n};\n//# sourceMappingURL=object.utils.js.map",null,"/**\n * Type check for string values.\n *\n * @param {any} value Any value\n * @return {boolean} True if it is a string, false otherwise\n */\nexport const isString = (value) => {\n    return typeof value === 'string';\n};\n/**\n * Type check for number values.\n *\n * @param {any} value Any value\n * @return {boolean} True if it is a number, false otherwise\n */\nexport const isNumber = (value) => {\n    return typeof value === 'number';\n};\n/**\n * Type check for boolean values.\n *\n * @param {any} value Any value\n * @return {boolean} True if it is a boolean, false otherwise\n */\nexport const isBoolean = (value) => {\n    return typeof value === 'boolean';\n};\n/**\n * Type check for Date values.\n *\n * @param {any} value Any value\n * @return {boolean} True if it is a Date, false otherwise\n */\nexport const isDate = (value) => {\n    return value instanceof Date;\n};\n/**\n * Type check for Array values. Alias for `Array.isArray`.\n *\n * @param {any} value Any value\n * @return {boolean} True if it is an Array, false otherwise\n */\nexport const isArray = (value) => {\n    return Array.isArray(value);\n};\n/**\n * Type check for plain object values: { [key]: value }\n *\n * @param {any} value Any value\n * @return {boolean} True if it is a plain object, false otherwise\n */\nexport const isPlainObject = (value) => {\n    return value !== null && typeof value === 'object' && value.constructor.name === 'Object';\n};\n/**\n * Type check for null values.\n *\n * @param {any} value Any value\n * @return {boolean} True if it is a null, false otherwise\n */\nexport const isNull = (value) => {\n    return value === null;\n};\n/**\n * Type check for Function values.\n *\n * @param {any} value Any value\n * @return {boolean} True if it is a Function, false otherwise\n */\nexport const isFunction = (value) => {\n    return typeof value === 'function';\n};\n//# sourceMappingURL=type.utils.js.map",null,"// Messages are objects going into the simulation worker.\n// They can be thought of similar to requests.\n// (not quite as there is no immediate response to a request)\nexport var WorkerInputType;\n(function (WorkerInputType) {\n    // Set node and edge data without simulating\n    WorkerInputType[\"SetData\"] = \"Set Data\";\n    WorkerInputType[\"AddData\"] = \"Add Data\";\n    WorkerInputType[\"UpdateData\"] = \"Update Data\";\n    WorkerInputType[\"ClearData\"] = \"Clear Data\";\n    // Simulation message types\n    WorkerInputType[\"Simulate\"] = \"Simulate\";\n    WorkerInputType[\"ActivateSimulation\"] = \"Activate Simulation\";\n    WorkerInputType[\"StartSimulation\"] = \"Start Simulation\";\n    WorkerInputType[\"UpdateSimulation\"] = \"Update Simulation\";\n    WorkerInputType[\"StopSimulation\"] = \"Stop Simulation\";\n    // Node dragging message types\n    WorkerInputType[\"StartDragNode\"] = \"Start Drag Node\";\n    WorkerInputType[\"DragNode\"] = \"Drag Node\";\n    WorkerInputType[\"EndDragNode\"] = \"End Drag Node\";\n    WorkerInputType[\"FixNodes\"] = \"Fix Nodes\";\n    WorkerInputType[\"ReleaseNodes\"] = \"Release Nodes\";\n    // Settings and special params\n    WorkerInputType[\"SetSettings\"] = \"Set Settings\";\n})(WorkerInputType || (WorkerInputType = {}));\n//# sourceMappingURL=worker-input.js.map",null,"export var WorkerOutputType;\n(function (WorkerOutputType) {\n    WorkerOutputType[\"SIMULATION_START\"] = \"simulation-start\";\n    WorkerOutputType[\"SIMULATION_PROGRESS\"] = \"simulation-progress\";\n    WorkerOutputType[\"SIMULATION_END\"] = \"simulation-end\";\n    WorkerOutputType[\"NODE_DRAG\"] = \"node-drag\";\n    WorkerOutputType[\"NODE_DRAG_END\"] = \"node-drag-end\";\n    WorkerOutputType[\"SETTINGS_UPDATE\"] = \"settings-update\";\n})(WorkerOutputType || (WorkerOutputType = {}));\n//# sourceMappingURL=worker-output.js.map",null],"names":["$52eff533f06343d3$var$add","tree","x","y","d","isNaN","parent","xm","ym","xp","yp","right","bottom","i","j","node","_root","leaf","data","x0","_x0","y0","_y0","x1","_x1","y1","_y1","length","_x","call","_y","next","$193001351f8ef695$export$2e2bcd8739ae039","$2f57a63172d5c41d$export$e6fafc98131d2a44","$2dfd96a9d213be3f$export$6f0a21aeb844a64c","$e6b0b758fd7af9aa$export$2e2bcd8739ae039","nodes","$e6b0b758fd7af9aa$var$Quadtree","NaN","addAll","undefined","$e6b0b758fd7af9aa$var$leaf_copy","copy","$06d3d6cf54a075da$export$da1c198471fd31fc","$7a4feef5eb6a9dc7$export$454a134d4a7d4ad","$7501b447282bb453$export$b7621e1654990472","$e6b0b758fd7af9aa$var$treeProto","prototype","$8f091c857f355135$export$2e2bcd8739ae039","$51816d6653360e3b$export$2e2bcd8739ae039","random","$475094b0adc72c69$var$x","vx","$475094b0adc72c69$var$y","vy","$1b1812fc60e9d4f2$var$index","index","$1b1812fc60e9d4f2$var$find","nodeById","nodeId","get","Error","child","source","target","pop","push","add","cover","n","xz","Array","yz","Infinity","Math","floor","z","visit","extent","_","arguments","find","radius","x2","y2","q","x3","y3","quads","dx","dy","d2","sqrt","remove","retainer","previous","removeAll","root","size","callback","visitAfter","$6948aa01131ba3a4$var$noop","value","$6948aa01131ba3a4$var$dispatch","t","test","$6948aa01131ba3a4$var$Dispatch","$6948aa01131ba3a4$var$set","type","name","slice","concat","constructor","on","typename","T","typenames","trim","split","map","indexOf","types","hasOwnProperty","$6948aa01131ba3a4$var$get","c","that","args","apply","$63cb61f11e735994$var$taskHead","$63cb61f11e735994$var$taskTail","$63cb61f11e735994$var$frame","$63cb61f11e735994$var$timeout","$63cb61f11e735994$var$interval","$63cb61f11e735994$var$clockLast","$63cb61f11e735994$var$clockNow","$63cb61f11e735994$var$clockSkew","$63cb61f11e735994$var$clock","performance","now","Date","$63cb61f11e735994$var$setFrame","window","requestAnimationFrame","bind","f","setTimeout","$63cb61f11e735994$export$461939dd4422153","$63cb61f11e735994$var$clearNow","$63cb61f11e735994$export$c57e9b2d8b9e4de","_call","_time","_next","$63cb61f11e735994$export$9dc4ecf953986f04","delay","time","restart","$63cb61f11e735994$var$wake","$63cb61f11e735994$export$d60154c1d7f3990e","e","$63cb61f11e735994$var$nap","t0","t2","t1","$63cb61f11e735994$var$sleep","$63cb61f11e735994$var$poke","clearTimeout","clearInterval","setInterval","$57b6b5bc1eaeff34$export$d141bba7fdc215a3","$57b6b5bc1eaeff34$export$4a5767248b18ef41","TypeError","stop","$57b6b5bc1eaeff34$var$initialAngle","PI","$8c3669d8e468947b$export$4293555f241ae35a","_listeners","Map","once","eventName","func","newListener","callable","isOnce","listeners","set","off","filteredListeners","filter","listener","emit","params","hasOnceListener","eventNames","keys","listenerCount","addListener","removeListener","removeAllListeners","delete","clear","$8476f47520e7cd57$export$871608497c498473","$8476f47520e7cd57$export$43bee75e5e14138e","isArray","$8476f47520e7cd57$export$53b83ca8eaab0383","$b3abb3226d80884a$export$84f041eb9803ea1f","obj","$b3abb3226d80884a$var$copyDate","$b3abb3226d80884a$var$copyArray","$b3abb3226d80884a$var$copyPlainObject","$b3abb3226d80884a$export$2ec3988ee92e21d0","obj1","obj2","isDate1","isDate2","getTime","isArray1","isArray2","every","isObject1","isObject2","keys1","Object","keys2","key","date","array","newObject","forEach","D3SimulatorEngineEventType","$06d3d6cf54a075da$export$de29564508b632b2","isPhysicsEnabled","alpha","alphaMin","alphaDecay","alphaTarget","centering","strength","collision","iterations","links","distance","manyBody","theta","distanceMin","distanceMax","positioning","forceX","forceY","$06d3d6cf54a075da$var$fixNode","fx","fy","$06d3d6cf54a075da$var$releaseNode","WorkerInputType","WorkerOutputType","$9acc002fb81d8d7e$var$simulator","settings","_edges","_nodes","_nodeIndexByNodeId","_isDragging","_isStabilizing","linkForce","strengths","distances","count","bias","id","link","min","force","k","l","b","initialize","m","initializeStrength","initializeDistance","_random","simulation","s","pow","velocityDecay","forces","stepper","step","event","$f606901d0fb54e83$var$a","tick","initializeNodes","$57b6b5bc1eaeff34$var$initialRadius","angle","cos","sin","initializeForce","randomSource","closest","assign","initSimulation","TICK","edges","END","getSettings","setSettings","previousSettings","SETTINGS_UPDATE","runSimulation","isUpdatingSettings","startDragNode","activateSimulation","dragNode","NODE_DRAG","endDragNode","releaseNodes","fixDefinedNodes","addData","setNodeIndexByNodeId","clearData","setData","updateData","newNodeIds","Set","oldNodes","has","newNodes","simulate","fixNodes","startSimulation","updateSimulation","SIMULATION_END","stopSimulation","_a","_b","_c","_d","radii","xi","yi","ri","ri2","prepare","quad","rj","r","distanceMin2","distanceMax2","theta2","accumulate","weight","abs","w","positioningForceX","positioningForceY","sx","sy","options","SIMULATION_START","totalSimulationSteps","ceil","log","lastProgress","currentProgress","round","SIMULATION_PROGRESS","progress","$9acc002fb81d8d7e$var$emitToMain","message","postMessage","NODE_DRAG_END","addEventListener","ActivateSimulation","SetData","AddData","UpdateData","ClearData","Simulate","StartSimulation","UpdateSimulation","StopSimulation","StartDragNode","DragNode","FixNodes","ReleaseNodes","EndDragNode","SetSettings"],"version":3,"file":"process.worker.6458fd74.js.map"}